<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="gridViewTemplate" viewtype="Test" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/*============================================================================================*
o File Name   : gridViewTemplate.xviewgen
o Developer   : Kim Dae Won
o Create Date : 2021.04.29
o Description : Grid View Template
o Version     : 1.0.0.0
*============================================================================================*/

//////////////////////////////상수 설정부 START ////////////////////////////////////////////////////

var HEAD_BAND_SIZE 		  = 30;
var BODY_BAND_SIZE 		  = 30;
var SUMM_BAND_SIZE 		  = 30;
var COL_SIZE 		  	  = 80;

var DISPLAY_TYPE   		  = "normal";
var EDIT_TYPE     		  = "none";
var CELL_CSSCLASS		  = "";

//////////////////////////////상수 설정부 END ////////////////////////////////////////////////////

//모델 정보
var oFieldArray;
	
//뷰 컴포넌트 정보
var oContents;
	
//옵션 설정 정보
var oGenerationAttr;

//컴포넌트 ID 목록
var arrCompIds = [];

//컴포넌트 + 바인드 Field 목록
var arrBindItems = [];
/*============================================================================================*
* Parameter Structure Example

1. 'fieldarray' structure example
{
    "modelinfo":
    {
        "serviceid":"model_sample",                                // model service id
        "serviceurl":"http://127.0.0.1:8983/app/addSearchApi.do?"  // model service url
    },
    "fieldcount" : "2",                                            // number of fields in model
    "fields" :
    [
        {                                                          // About the first field
            "id": "company",
            "label": "Company Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        },
        {                                                          // About the second field
            "id": "department",
            "label": "Department Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        } 
    ]
}

2. 'generationattr' structure example
{                                                                  // user-entered attributes for 'view' generation
  "attributes": {
    "use_triggerbutton": "true"
    "triggerbuttontext": "Search"
  }
}

3. 'contents' structure example
// --- design source of xfdl --- //
//   <View id="View00" viewtype="FreeForm" taborder="2" ... >
//     <Layouts>
//       <Layout>
//         <Static id="Static00" text="Company Name" left="0" .../>
//         <Combo id="Combo00" left="85" top="0" .../>
//         <Button id="btn_Trigger" left="617" top="5" .../>
//         ...
//       </Layout>
//     </Layouts>
//     <InitValue>
//       <Combo id="Combo00" enable="true"/>
//     </InitValue>
//     <Objects>
//       <Dataset id="Viewdataset">      
//         <ColumnInfo>      
//           <Column id="company" type="BLOB" size="80"/>      
//           <Column id="department" type="BLOB" size="80"/>      
//         </ColumnInfo>      
//         <Rows>      
//           <Row/>      
//         </Rows>      
//       </Dataset>      
//     </Objects>  
//     <Bind>
//       <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
//     </Bind>
//     <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
//   </View>
    
// --- design source converted to json format --- //
{
    "View": {                                                     // <View id="View00" viewtype="FreeForm" taborder="2" ... />
        "tag": "View",
        "referenceinfo": {
            "realwidth": "500",                                   // Real width of view component
            "realheight": "250"                                   // Real height of view component
        },
        "attribute": {
            "id": "View00",                                       // 'ID' of view component
            "viewtype": "FreeForm",                               // 'viewtype' property value of view component
            "taborder": "2",                                      // 'taborder' property value of view component
            "text": "search view",                                // 'text' property value of view component
            "left": "0",                                          // 'left' property value of view component
            "top": "0",                                           // 'top' property value of view component
            "width": "100%",                                      // 'width' property value of view component
            "height": "50%"                                       // 'height' property value of view component
        },
        "Model": [                                                // Information of components generated by each model field information.
            {                                                     // "fieldid" : "value" => The component generated by the field of Model
                "fieldid": "company",                             // "fieldid" : ""      => The component generated without the field of Model
                "Components": [                                   // The component information generated by the 'company' field.
                    {                                             //   <Static id="Static00" text="Company Name" left="0" .../>
                        "tag": "Static",
                        "attribute": {
                            "id": "Static00",
                            "text": "Company Name",
                            "left": "0",
                            "top": "0",
                            "width": "80",
                            "height": "20",
                        }
                    },
                    {                                             //   <Combo id="Combo00" left="85" top="0" .../>
                        "tag": "Combo",
                        "attribute": {
                            "id": "Combo00",
                            "left": "85",
                            "top": "0",
                            "width": "100",
                            "height": "24",
                        }
                    }
                ]
            },
            {   // with field
                "fieldid": "department",                          // "fieldid" : "value" => The component generated by the field of Model
                "Components": [
                ...
                ]
            },
            {
                "fieldid": "",                                    // "fieldid" : ""      => The component generated without the field of Model
                "Components": [
                    {                                             //   <Button id="btn_Trigger" left="617" top="5" .../>
                        "tag": "Button",
                        "attribute": {
                          "id": "btn_Trigger",
                          "left": "617",
                          "top": "5",
                          "width": "70",
                          "height": "50",
                          "text": "Search"
                        }
                    }
                ]
            }
        ],
        "InitValue": [
          {                                                       //   <InitValue>
            "tag": "InitValue",                                   //     <Combo id="Combo00" enable="true"/>
            "InitValue": [                                        //   </InitValue>
              {
                "tag": "Combo",
                "attribute": {
                  "id": "Combo00",
                  "enable": "true"
                }
              }
            ]
          }
        ],
        "Objects": [
          {                                                       //   <Objects>
            "tag": "Objects",                                     //     <Dataset id="Viewdataset">
            "Objects": [                                          //       <ColumnInfo>
              {                                                   //         <Column id="company" type="BLOB" size="80"/>
                "tag": "Dataset",                                 //         <Column id="department" type="BLOB" size="80"/>
                "attribute": {                                    //       </ColumnInfo>
                  "id": "viewdataset"                             //       <Rows>
                },                                                //         <Row/>
                "Dataset": [                                      //       </Rows>
                  {                                               //     </Dataset>
                    "tag": "ColumnInfo",                          //   </Objects>
                    "ColumnInfo": [
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "company",
                          "type": "BLOB",
                          "size": "80"
                        }
                      },
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "department",
                          "type": "BLOB",
                          "size": "80"
                        }
                      }
                    ]
                  },
                  {
                    "tag": "Rows",
                    "Rows": [
                      {
                        "tag": "Row"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Bind": [
        {                                                         //   <Bind>
          "tag": "Bind",                                          //     <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
          "Bind": [                                               //   </Bind>
              {
                "tag": "BindItem",
                "attribute": {
                  "id": "item0",
                  "compid": "Combo00",
                  "propid": "value",
                  "datasetid": "viewdataset",
                  "columnid": "company"
                }
              }
            ]
          }
        ],
        "Script": {                                               // <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
            "tag": "Script",
            "attribute": {
                "type": "xscript5.1"
            },
            "value": "this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}"
        }
    }
}
*============================================================================================*/

/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {

	//리턴 값
    var vResult = "";
			
    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);
      
    //모델정보를 JSON 오브젝트로 설정
    if(fieldarray)oFieldArray = JSON.parse(fieldarray);
    
	//뷰 컴포넌트 정보를 JSON 오브젝트로 설정
    if(contents)oContents = JSON.parse(contents);
    
	//옵션 설정 정보를 JSON 오브젝트로 설정
    if(generationattr)oGenerationAttr = JSON.parse(generationattr);
    
	//모델정보 초기화
	oContents.View.Model = [];
	
	//모델정보 생성 함수 호출
	fn_GetModel();
	
	//InitValue 정보 생성 함수 호출
    oContents.View.InitValue = fn_GetInitValue();
	
	//Object 정보 생성 함수 호출
    oContents.View.Objects = fn_GetObjects();
	
	//Script 정보 생성 함수 호출
    oContents.View.Script = fn_GetScript();
    
	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(oContents, null, "\t");
    
    //trace(">> vResult : " + vResult);
    //뷰 컴포넌트 정보 리턴
    return vResult;
};


/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {

    var strJson = "";
    var oJson = {
                        "attributecount": "6",
                        "attributes": [
							{
                                "id": "headbandsize",
                                "edittype": "Number",
								"defaultvalue": HEAD_BAND_SIZE,
								"description": "Head Band Size를 을 설정합니다."
                                
                            },
							{
                                "id": "bodybandsize",
                                "edittype": "Number",
								"defaultvalue": BODY_BAND_SIZE,
								"description": "Body Band Size를 을 설정합니다."
                                
                            },
							{
                                "id": "summbandsize",
                                "edittype": "Number",
								"defaultvalue": SUMM_BAND_SIZE,
								"description": "Summ Band Size를 을 설정합니다."
                                
                            },
                            {
                                "id": "headformat",
                                "edittype": "layout",
								"defaultvalue": "",
								"userproperties" : {
									"propertycount" : "2",
									"properties" :
									[
										{
											"id" : "text", "edittype" : "String", "defaultvalue" : ""
											, "discription" : "해당 Cell에 표현될 텍스트를 입력합니다."
										},
										{
											"id" : "cssclass", "edittype" : "String", "defaultvalue" : ""
											, "discription" : "해당 Cell의 스타일을 XCSS에 정의된 class로 표현합니다."
										}
									]
								},
								"description": "View Head Layout을 설정합니다."
                                
                            },
                            {
                                "id": "bodyformat",
                                "edittype": "layout",
								"defaultvalue": "",
								"userproperties" : {
									"propertycount" : "2",
									"properties" :
									[
										{
											"id" : "text", "edittype" : "String", "defaultvalue" : ""
											, "discription" : "해당 Cell에 표현될 텍스트를 입력합니다."
										},
										{
											"id" : "cssclass", "edittype" : "String", "defaultvalue" : ""
											, "discription" : "해당 Cell의 스타일을 XCSS에 정의된 class로 표현합니다."
										}
									]
								},
								"description": "View Body Layout을 설정합니다."
                                
                            },
                            {
                                "id": "summformat",
                                "edittype": "layout",
								"defaultvalue": "",
								"userproperties" : {
									"propertycount" : "2",
									"properties" :
									[
										{
											"id" : "text", "edittype" : "String", "defaultvalue" : ""
											, "discription" : "해당 Cell에 표현될 텍스트를 입력합니다."
										},
										{
											"id" : "cssclass", "edittype" : "String", "defaultvalue" : ""
											, "discription" : "해당 Cell의 스타일을 XCSS에 정의된 class로 표현합니다."
										}
									]
								},
								"description": "View Summ Layout을 설정합니다."
                                
                            }
                        ]
                  };
				  
	strJson = JSON.stringify(oJson, null, "\t");
    return strJson;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
   var strJson = "";
   		
    // TODO : Write a code that predefines the list of user attributes for adding to the model field.
	var oJson = {
                        "attributecount": "5",
                        "attributes": [
                            {
                                "id": "displaytype",
                                "edittype": "Enum",
								"enumlist" : ["normal", "none", "buttoncontrol", "calendarcontrol", "checkboxcontrol", "combocontrol", "combotext", "currency", "decoratetext", "editcontrol", "imagecontrol", "mask", "maskeditcontrol", "number",  "progressbarcontrol",  "text",  "textareacontrol",  "treeitemcontrol"],
                                "defaultvalue": DISPLAY_TYPE,
                                "description": "Field의 표현형식을 설정합니다."
                            },
							{
                                "id": "edittype",
                                "edittype" : "Enum",
								"enumlist" : ["normal", "none", "button", "checkbox", "combo", "date", "mask", "readonly", "text", "textarea", "tree"],
								"defaultvalue" : EDIT_TYPE,
                                "description" : "Field의 편집형식을 설정합니다."
                            },
							{
                                "id": "fieldwidth",
                                "edittype": "Number",
								"defaultvalue": COL_SIZE,
                                "description": "Field Width(px)"
                            },
							{
                                "id": "cssclass",
                                "edittype": "String",
								"defaultvalue": CELL_CSSCLASS,
                                "description": "컴포넌트 CSS Class"
                            },
							{
                                "id": "summprop",
                                "edittype": "Enum",
								"enumlist": ["none", "avg", "count", "max", "min", "sum"],
								"defaultvalue": "none",
                                "description": "Summary 표현시 사용할 값 유형"
                            }
                        ]
                  };
				  
	strJson = JSON.stringify(oJson, null, "\t");
    
    return strJson;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    : 
 *                - oFieldArray : model field data
 *                - oContents : view contents
 *                - oGenerationAttr : attributes for view generation
 * Return       : model contents (JSON format)
 * Description  : Function to generate a component source based on field information of the model entered by the user
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(){
    
	//필드 ID
	var sFieldId;
	
	//모델 필드 갯수 가져오기
    var nFieldCount = oFieldArray.fieldcount;
	
	//기본으로 사용할 Layout
	var oBaseLayout;
	
	//Head 영역 생성시 사용할 Layout
	var oHeadLayout;
	
	//Body 영역 생성시 사용할 Layout
	var oBodyLayout;
	
	//Summ 영역 생성시 사용할 Layout
	var oSummLayout;
	
	//그리드에서 사용할 모델 Field ID 리스트 만들기
    for(i=0;i<nFieldCount;i++)
    {
        oField = oFieldArray.fields[i];
        if (sFieldId == undefined)sFieldId = oField.id;
        else sFieldId += "," + oField.id;
    }
	
	//Head 영역의 Layout이 설정되었을 경우
	if(oGenerationAttr.attributes.headformat)
	{
		//기본 Layout 설정
		oBaseLayout = oGenerationAttr.attributes.headformat;
		
		//Head Layout 설정
		oHeadLayout = oGenerationAttr.attributes.headformat;
	}
	
	//Body 영역의 Layout이 설정되었을 경우
	if(oGenerationAttr.attributes.bodyformat)
	{
		//기본 Layout이 설정되어있지 않을 경우
		//Body Layout을 기본 Layout으로 설정
		if(!oBaseLayout)oBaseLayout = oGenerationAttr.attributes.bodyformat;
		
		//Bdoy Layout 설정
		oBodyLayout = oGenerationAttr.attributes.bodyformat;
	}
	//Body Layout이 설정되어있지 않을 경우
	//기본 Layout을 Body Layout으로 설정
	else if(!oGenerationAttr.attributes.bodyformat&&oBaseLayout)
	{
		oBodyLayout = oBaseLayout;
	}
	
	//Summ 영역의 Layout이 설정되었을 경우
	if(oGenerationAttr.attributes.summformat)
	{
		//기본 Layout이 설정되어있지 않을 경우
		//Summ Layout을 기본 Layout으로 설정
		if(!oBaseLayout)oBaseLayout = oGenerationAttr.attributes.summformat;
		
		//Summ Layout 설정
		oSummLayout = oGenerationAttr.attributes.summformat;
	}
	
	//그리드 컴포넌트 추가
	var oModel = oContents.View.Model;
    oModel[oModel.length] = {
            "fieldid" : sFieldId,
            "Components" : 
            [    
                {
                    "tag" : "Grid",
                    "attribute" :
                    {
                        "id" : "grdList", "left" : 0,    "top" : 0, "right" : 0, "bottom" : 0, "binddataset" : "viewdataset"
                    },
                    "Grid" : 
                    [    
                        {
                            "tag": "Formats", 
                            "attribute": {},
                            "Formats": 
                            [    
                                {
                                    "tag": "Format",
                                    "attribute": { "id": "default" },
                                    "Format": 
                                    [    
                                        {
                                            "tag": "Columns",
                                            "attribute": {},
											//그리드 컬럼 정보 생성 함수 호출
                                            "Columns": fn_GetColumns(oBaseLayout)
                                        },
                                        {
                                            "tag": "Rows",
                                            "attribute": {},
											//그리드 로우 정보 생성 함수 호출
                                            "Rows": fn_GetRows(oBaseLayout, oHeadLayout, oBodyLayout, oSummLayout)
                                        },
                                        {
                                            "tag": "Band",
                                            "attribute": { "id" : "head"},
											//그리드 헤드 정보 생성 함수 호출
                                            "Band": fn_GetHeads(oBaseLayout, oHeadLayout)
                                        },
                                        {
                                            "tag": "Band",
                                            "attribute": { "id" : "body"},
											//그리드 바디 정보 생성 함수 호출
                                            "Band": fn_GetBodys(oBaseLayout, oBodyLayout)
                                        },
                                        {
                                            "tag": "Band",
                                            "attribute": { "id" : "summary"},
											//그리드 서머리 정보 생성 함수 호출
                                            "Band": fn_GetSumms(oBaseLayout, oSummLayout)
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    
	//생성할 Model 정보 리턴
    return oModel;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetColumns
 * Parameter    : 
 *                - oBaseLayout : base layout data
 * Return       : column(s) data of grid format
 * Description  : Function to generate <Column> source
 *---------------------------------------------------------------------------------------------*/
fn_GetColumns = function(oBaseLayout){
    
	var oColumns = [];
	var oField;
	var nCount
	var nFieldWidth;
	
	//레이아웃이 설정되어있을 경우
	if(oBaseLayout)
	{
		//기본 Layout columnsize 갯수 기준으로 Column 태그 생성
		nCount = oBaseLayout.columnsize.length;
		for(var i=0;i<nCount;i++)
		{
			nFieldWidth = oBaseLayout.columnsize[i];
			
			oColumns[oColumns.length] = 
			{
				"tag": "Column",
				"attribute": {"size": nFieldWidth, "band": "body"}
			}
		}
	}
	//레이아웃이 설정되어 있지 않을 경우
	else
	{
		//Model Field의 갯수 기준으로 Column 태그 생성
		nCount = oFieldArray.fieldcount;
		for(var i=0;i<nCount;i++)
		{
			oField = oFieldArray.fields[i];
			nFieldWidth = oField.fieldwidth;
			
			oColumns[oColumns.length] = 
			{
				"tag": "Column",
				"attribute": {"size": nFieldWidth, "band": "body"}
			}
		}
	}
    
	//컬럼 정보 리턴
    return oColumns;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetRows
 * Parameter    : 
 *                - oBaseLayout : base layout data
				  - oHeadLayout : head layout data
				  - oBodyLayout : body layout data
				  - oSummLayout : summ layout data
 * Return       : row(s) data of grid format
 * Description  : Function to generate <Row> source
 *---------------------------------------------------------------------------------------------*/
fn_GetRows = function(oBaseLayout, oHeadLayout, oBodyLayout, oSummLayout){

	var nCount;
	var oRows = [];
    var nHeadBandSize;
	var nBodyBandSize;
	var nSummBandSize;
	
	//레이아웃이 설정되어있을 경우
	if(oBaseLayout)
	{
		//Head용 Row 태그 추가
		if(oHeadLayout)
		{
			nCount = oHeadLayout.rowsize.length;
			for(var i=0;i<nCount;i++)
			{
				nHeadBandSize = oHeadLayout.rowsize[i];
				oRows[oRows.length] = {
						"tag": "Row",
						"attribute": {"size": nHeadBandSize, "band": "head"}
					}
			}
		}
		
		//Body용 Row 태그 추가
		if(oBodyLayout)
		{
			nCount = oBodyLayout.rowsize.length;
			for(var i=0;i<nCount;i++)
			{
				nBodyBandSize = oBodyLayout.rowsize[i];
				oRows[oRows.length] = {
						"tag": "Row",
						"attribute": {"size": nBodyBandSize, "band": "body"}
					}
			}
		}
		
		//Summ용 Row 태그 추가
		if(oSummLayout)
		{
			nCount = oSummLayout.rowsize.length;
			for(var i=0;i<nCount;i++)
			{
				nSummBandSize = oSummLayout.rowsize[i];
				oRows[oRows.length] = {
						"tag": "Row",
						"attribute": {"size": nSummBandSize, "band": "summ"}
					}
			}
		}
	}
	//레이아웃이 설정되어있지 않을 경우
	else
	{
		//각 Band의 사이즈 정보 가져오기
		nHeadBandSize = oGenerationAttr.attributes.headbandsize;
		nBodyBandSize = oGenerationAttr.attributes.bodybandsize;
		nSummBandSize = oGenerationAttr.attributes.summbandsize;
	
		//Head Size가 -1보다 클 경우 Head용 Row 태그 추가
		if(nHeadBandSize>-1)
		{
			oRows[oRows.length] = {
						"tag": "Row",
						"attribute": {"size": nHeadBandSize, "band": "head"}
					}
		}
		
		//Body Size가 -1보다 클 경우 Body용 Row 태그 추가
		if(nBodyBandSize>-1)
		{
			oRows[oRows.length] = {
							"tag": "Row",
							"attribute": {"size": nBodyBandSize, "band": "body"}
						}
		}
		
		//Summ Size가 -1보다 클 경우 Summ용 Row 태그 추가
		if(nSummBandSize>-1)
		{
			oRows[oRows.length] = {
							"tag": "Row",
							"attribute": {"size": nSummBandSize, "band": "summ"}
						}
		}
	}
	    
	//로우 정보 리턴
    return oRows;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetHeads
 * Parameter    : 
 *                - oBaseLayout : base layout data
				  - oHeadLayout : head layout data
 * Return       : head band data of grid format
 * Description  : Function to generate <Band id="head"> source
 *---------------------------------------------------------------------------------------------*/
fn_GetHeads = function(oBaseLayout, oHeadLayout){

    var nCount;
	var nFieldCount;
	
	var oHeads = [];
    
	var arrCellList;
	var oCell;
	var nCol;
	var nColSpan;
	var nRow;
	var nRowSpan;
	var sCellText;
	
	var oField;
    var sFieldId = "";
    var sLabel = "";
    var sCssClass;
	
	//레이아웃이 설정되어 있을 경우
	if(oBaseLayout)
	{
		//Head Layout이 설정되어 있을 경우
		if(oHeadLayout)
		{
			//Cell의 갯수 가져오기
			arrCellList = oHeadLayout.celllist;
			nCount = arrCellList.length;
			
			for(var i=0;i<nCount;i++)
			{
				//Cell 정보 가져오기
				oCell = arrCellList[i];
				nCol = nexacro.toNumber(oCell.col);
				nRow = nexacro.toNumber(oCell.row);
				nColSpan = nexacro.toNumber(oCell.colspan);
				nRowSpan = nexacro.toNumber(oCell.rowspan);
				sCssClass = oCell.cssclass;
				
				if(!nColSpan)nColSpan = 1;
				if(!nRowSpan)nRowSpan = 1;
				
				//text 속성 값 가져오기
				sCellText = oCell.text;
				
				sLabel = "";
				
				//Cell에 포함된 Field 정보가 있을 경우 
				if(oCell.fieldlist)
				{
					//Field의 레이블정보 가져오기
					//만약 여러개의 Field가 있을 경우 레이블 + 레이블 형태로 표현
					nFieldCount = oCell.fieldlist.length;
					for(var j=0;j<nFieldCount;j++)
					{
						sFieldId = oCell.fieldlist[j];
						oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
						sLabel += oField.label;
					}
				}
				//Cell에 포함된 Field 정보가 없을 경우 
				else
				{
					//text 속성에 값이 있을 경우 text 값을 레이블로 설정
					if(sCellText)sLabel = sCellText;
				}
				
				//Head Band에 Cell 태그 추가
				oHeads[oHeads.length] =
				{
					"tag": "Cell",
					"attribute": 
					{
						"id": "cell_"+nCol+"_"+nRow+"_"+sFieldId, "col": nCol, "row": nRow, "colspan": nColSpan, "rowspan": nRowSpan, "text": sLabel, "cssclass" : sCssClass
					}
				};
			}
		}
	}
	//레이아웃이 설정되어 있지 않을 경우
	else
	{
		if(oGenerationAttr.attributes.headbandsize>-1)
		{
			//Model Field 갯수 가져오기
			nCount = oFieldArray.fieldcount;
			
			//필드 갯수만큼 Head Band에 Cell 태그 추가
			for(var i=0;i<nCount;i++)
			{
				oField = oFieldArray.fields[i];
				
				sFieldId = oField.id;
				sLabel = oField.label;
				
				oHeads[oHeads.length] =
				{
					"tag": "Cell",
					"attribute": 
					{
						"id": "cell_"+sFieldId, "col": oHeads.length, "row": 0, "text": sLabel
					}
				};
			}
		}
	}
	        
    return oHeads;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetBodys
 * Parameter    : 
 *                - oBaseLayout : base layout data
				  - oBodyLayout : body layout data
 * Return       : body band data of grid format
 * Description  : Function to generate <Band id="body"> source
 *---------------------------------------------------------------------------------------------*/
fn_GetBodys = function(oBaseLayout, oBodyLayout){
	
    var nCount;
	var nFieldCount;
	
	var oBodys = [];
    
	var arrCellList;
	var oCell;
	var nCol;
	var nColSpan;
	var nRow;
	var nRowSpan;
	
	var oField;
    var sFieldId = "";
    var sLabel = "";
	var sDisplayType;
	var sEditType;
	var sCssClass = "";
	var sCellCssClass = "";
	
	//레이아웃이 설정되어 있을 경우
	if(oBaseLayout)
	{
		//Body Layout이 설정되어 있을 경우
		if(oBodyLayout)
		{
			//Cell의 갯수 가져오기
			arrCellList = oBodyLayout.celllist;
			nCount = arrCellList.length;
			
			for(var i=0;i<nCount;i++)
			{
				//Cell 정보 가져오기
				oCell = arrCellList[i];
				nCol = nexacro.toNumber(oCell.col);
				nRow = nexacro.toNumber(oCell.row);
				nColSpan = nexacro.toNumber(oCell.colspan);
				nRowSpan = nexacro.toNumber(oCell.rowspan);
				sCellCssClass = oCell.cssclass;
				
				if(!nColSpan)nColSpan = 1;
				if(!nRowSpan)nRowSpan = 1;
				
				//text 속성 값 가져오기
				sCellText = oCell.text;
				
				sLabel = "";
				
				//Cell에 포함된 Field 정보가 있을 경우 
				if(oCell.fieldlist)
				{
					//Cell에 포함된 Field의 갯수 가져오기
					nFieldCount = oCell.fieldlist.length;
					
					//Field가 1개일 경우 해당 Field와 Bind
					if(nFieldCount==1)
					{
						sFieldId = oCell.fieldlist[0];
						oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
						sDisplayType = oField.displaytype;
						sEditType = oField.edittype;
						sCssClass = oField.cssclass;		
						sLabel = "bind:"+sFieldId;
					}
					//Field가 1개 이상일 경우
					//expr을 이용하여 Field + Field 형태로 표현
					//expr로 설정되었으므로 displaytype = normal, edittype = none으로 설정
					else
					{
						sLabel = "expr:";
						for(var j=0;j<nFieldCount;j++)
						{
							sFieldId = oCell.fieldlist[j];
							oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
							sDisplayType = "normal";
							sEditType = "none";
							
							if(j==0)
							{
								sLabel += sFieldId;
								sCssClass += oField.cssclass;
							}
							else
							{
								sLabel += "+"+sFieldId;
								sCssClass += ","+oField.cssclass;
							}
						}
					}
				}
				//Cell에 포함된 Field 정보가 없을 경우 
				else
				{
					//displaytype = normal, edittype=none으로 설정
					sDisplayType = "normal";
					sEditType = "none";
					
					//text 속성에 값이 있을 경우 text 값을 레이블로 설정
					if(sCellText)sLabel = sCellText;
				}
				
				if(sCellCssClass)sCssClass = sCellCssClass;
				
				//Body Band에 Cell 태그 추가
				oBodys[oBodys.length] =
				{
					"tag": "Cell",
					"attribute": 
					{
						"id": "cell_"+nCol+"_"+nRow+"_"+sFieldId, "col": nCol, "row": nRow, "colspan": nColSpan, "rowspan": nRowSpan
						, "text": sLabel, "displaytype" : sDisplayType, "edittype" : sEditType, "cssclass":sCssClass
					}
				};
			}
		}
	}
	//레이아웃이 설정되어 있지 않을 경우
	else
	{
		if(oGenerationAttr.attributes.bodybandsize>-1)
		{
			//Model Field 갯수 가져오기
			nCount = oFieldArray.fieldcount;
			
			//필드 갯수만큼 Body Band에 Cell 태그 추가
			for(var i=0;i<nCount;i++)
			{
				oField = oFieldArray.fields[i];
				
				sFieldId = oField.id;
				sLabel = "bind:"+sFieldId;
				sDisplayType = oField.displaytype;
				sEditType = oField.edittype;
				sCssClass = oField.cssclass;		
				oBodys[oBodys.length] =
				{
					"tag": "Cell",
					"attribute": 
					{
						"id": "cell_"+sFieldId, "col": oBodys.length, "row": 0, "text": sLabel, "displaytype" : sDisplayType, "edittype" : sEditType, "cssclass":sCssClass
					}
				};
			}
		}
	}
	
	return oBodys;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetSums
 * Parameter    : 
 *                - oBaseLayout : base layout data
				  - oSummLayout : Summ layout data
 * Return       : summ band data of grid format
 * Description  : Function to generate <Band id="summ"> source
 *---------------------------------------------------------------------------------------------*/
fn_GetSumms = function(oBaseLayout, oSummLayout){

    var nCount;
	var nFieldCount;
	
	var oSumms = [];
    
	var arrCellList;
	var oCell;
	var nCol;
	var nColSpan;
	var nRow;
	var nRowSpan;
	var sCellText;
	
	var oField;
    var sFieldId = "";
    var sLabel = "";
    var sSummProp;
	var sCssClass = "";
	
	//레이아웃이 설정되어 있을 경우
	if(oBaseLayout)
	{
		//Summ Layout이 설정되어 있을 경우
		if(oSummLayout)
		{
			//Cell의 갯수 가져오기
			arrCellList = oSummLayout.celllist;
			nCount = arrCellList.length;
			
			for(var i=0;i<nCount;i++)
			{
				//Cell 정보 가져오기
				oCell = arrCellList[i];
				nCol = nexacro.toNumber(oCell.col);
				nRow = nexacro.toNumber(oCell.row);
				nColSpan = nexacro.toNumber(oCell.colspan);
				nRowSpan = nexacro.toNumber(oCell.rowspan);
				sCssClass = oCell.cssclass;
				
				if(!nColSpan)nColSpan = 1;
				if(!nRowSpan)nRowSpan = 1;
				
				//text 속성 값 가져오기
				sCellText = oCell.text;
				
				sLabel = "";
				
				//Cell에 포함된 Field 정보가 있을 경우 
				if(oCell.fieldlist)
				{
					//Cell에 포함된 Field의 갯수 가져오기
					nFieldCount = oCell.fieldlist.length;
					
					for(var j=0;j<nFieldCount;j++)
					{
						sFieldId = oCell.fieldlist[j];
						oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
						
						//Summ 표현 유형 값 가져오기(none, avg, count, max, min, sum)
						sSummProp = oField.summprop;
						
						//Summ 표현 유형에 맞춰 expr 작성
						//하나의 Cell에 여러개의 Field가 있을 경우
						//계산식 + 계산식 형태로 표현
						if(sSummProp=="avg")
						{
							if(sLabel=="")sLabel = "expr:dataset.getAvg('"+sFieldId+"')";
							else sLabel += "+dataset.getAvg('"+sFieldId+"')";
						}else if(sSummProp=="count")
						{	
							if(sLabel=="")sLabel = "expr:dataset.getCount('"+sFieldId+"')";
							else sLabel += "+dataset.getCount('"+sFieldId+"')";
						}else if(sSummProp=="max")
						{
							if(sLabel=="")sLabel = "expr:dataset.getMax('"+sFieldId+"')";
							else sLabel += "+dataset.getMax('"+sFieldId+"')";
						}else if(sSummProp=="min")
						{
							if(sLabel=="")sLabel = "expr:dataset.getMax('"+sFieldId+"')";
							else sLabel += "+dataset.getMax('"+sFieldId+"')";
						}else if(sSummProp=="sum")
						{
							if(sLabel=="")sLabel = "expr:dataset.getSum('"+sFieldId+"')";
							else sLabel += "+dataset.getSum('"+sFieldId+"')";
						}
					}
				}
				//Cell에 포함된 Field 정보가 없을 경우 
				else
				{
					//text 속성에 값이 있을 경우 text 값을 레이블로 설정
					if(sCellText)sLabel = sCellText;
				}
				
				//Summ Band에 Cell 태그 추가
				oSumms[oSumms.length] =
				{
					"tag": "Cell",
					"attribute": 
					{
						"id": "cell_"+nCol+"_"+nRow+"_"+sFieldId, "col": nCol, "row": nRow, "colspan": nColSpan, "rowspan": nRowSpan, "text" : sLabel, "cssclass" : sCssClass
					}
				};
			}
		}
	}
	//레이아웃이 설정되어 있지 않을 경우
	else
	{
		if(oGenerationAttr.attributes.summbandsize>-1)
		{
			//Model Field 갯수 가져오기
			nCount = oFieldArray.fieldcount;
			
			//필드 갯수만큼 Summ Band에 Cell 태그 추가
			for(var i=0;i<nCount;i++)
			{
				oField = oFieldArray.fields[i];
				
				sFieldId = oField.id;
				sLabel = oField.label;
				
				oSumms[oSumms.length] =
				{
					"tag": "Cell",
					"attribute": 
					{
						"id": "cell_"+sFieldId, "col": oSumms.length, "row": 0, "text" : ""
					}
				};
			}
		}
	}
	        
    return oSumms;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Parameter    : 
 *                - oFieldArray : model field data
 *                - oContents : view contents
 *                - oGenerationAttr : attributes for view generation
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function(){
    
    var oInitValue = [];
    /*
    oInitValue = 
    [
        {
            "tag" : "initValue",
            "initValue" :
            [
                {
                    "tag" : "Button",
                    "attribute" : 
                    {
                        "id" : "btnSearch", "text" : "Search11"
                    }
                }
            ]
        } 
    ];
    */
    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Parameter    : 
 *                - oFieldArray : model field data
 *                - oContents : view contents
 *                - oGenerationAttr : attributes for view generation
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function(){
    
	//오브젝트 정보 초기화
    var oObjects = [];
    
	//오브젝트 정보 설정
    oObjects =     
    [
        {
            "tag": "Dataset",
            "attribute": { "id": "viewdataset" },
            "Dataset": [
                {
                    "tag": "ColumnInfo",
                    "attribute": {},
					//데이터셋 컬럼정보 설정함수 호출
                    "ColumnInfo": fn_GetDsColumns()
                },
                {
                    "tag": "Rows",
                    "attribute": {},
					//데이터셋 로우정보 설정함수 호출
                    "Rows": fn_GetDsRows()
                }
            ]
        }
    ];
    
    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    : 
 *                - oFieldArray : model field data
 *                - oContents : view contents
 *                - oGenerationAttr : attributes for view generation
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function(){
    
	//스크립트 정보 초기화
    var oScript = {};
    
	//스크립트 정보 리턴
    return oScript;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsColumns
 * Parameter    : 
 *                - oFieldArray : model field data
 * Return       : dataset column(s) data
 * Description  : Function to generate <Column> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsColumns = function(){
    var i;
    var oColumns = [];
    
    var oField;
    var sFieldId;
    var sDataType;
    var sDataSize;
    
    //모델 Field 개수 가져오기
    var nCount = oFieldArray.fieldcount;
    
    //모델 Field 개수 만큼 컬럼 정보 만들기
    for(i=0;i<nCount;i++)
    {
        oField = oFieldArray.fields[i];
        
        sFieldId = oField.id;
        sDataType = oField.datatype;
        sDataSize = oField.datasize;
        
        oColumns[i] = 
        {
            "tag": "Column",
            "attribute": 
            {
                "id": sFieldId, "type": sDataType, "size": sDataSize
            }
        };
    }
    
    //컬럼 정보 리턴
    return oColumns;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsRows
 * Parameter    : 
 *                - oFieldArray : model field data
 * Return       : dataset row(s) data
 * Description  : Function to generate <Row> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsRows = function(){
    var i;
    var oRows = [];
    var oRow = [];
    
    var oField;
    var sFieldId;
    
    //로우 개수
    var nRowCnt = 1;

    //컬럼 개수
    var nColCnt = oFieldArray.fieldcount;
    
    for(i=0;i<nRowCnt;i++)
    {
        oRow = [];
        
        //Row정보 Rows에 추가
        oRows[i] = {"tag": "Row",    "attribute": {},"Row": oRow};
    }
    
    //Rows 정보 리턴
    return oRows;
}]]></Script>
</ViewTemplateInfo>
