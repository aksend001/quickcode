<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="LoginViewTemplate" viewtype="Test" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/*============================================================================================*
o File Name   : 
o Developer   : 
o Create Date : 
o Description : 
*============================================================================================*/
//////////////////////////////Constant Setting  START ////////////////////////////////////////////////////	
//--------------------------------------------------------------------------------------------------------
// 로그인 Button 관련 상수
//--------------------------------------------------------------------------------------------------------
// Login Button ID
var LOGIN_BUTTON_ID = "btnLogin";

//Login Button Default Width											
var LOGIN_BUTTON_WIDTH   = 110;	

//Login Button Default Height											
var LOGIN_BUTTON_HEIGHT  = 50;											
											
//Login Button Padding											
var LOGIN_BUTTON_PADDING_LEFT     = 5;											
var LOGIN_BUTTON_PADDING_TOP      = 5;											
var LOGIN_BUTTON_PADDING_RIGHT    = 5;											
var LOGIN_BUTTON_PADDING_BOTTOM   = 5;											
											
//Login Button Default Text											
var LOGIN_BUTTON_TEXT    = "Login";											
											
//Login Button Default Form											
var LOGIN_BUTTON_TYPE    = "bottom";	

//Login Button Css Class											
var LOGIN_BUTTON_CSSCLASS = "btn_login";
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
// 아이디저장 Checkbox 관련 상수
//--------------------------------------------------------------------------------------------------------
// 아이디저장 체크박스 ID
var SAVEID_CHECKBOX_ID = "chkSaveId";
// 아이디저장 체크박스 TEXT
var SAVEID_CHECKBOX_TEXT = "Save User ID";
// 아이디저장 체크박스 CSS CLASS
var SAVEID_CHECKBOX_CSSCLASS = "chk_login";
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
// 컴포넌트(Label + Field) 관련 상수
//--------------------------------------------------------------------------------------------------------
// 네이밍 컨벤션 종류 (C : camelCase, S : snakeCase, 빈값 : 지정안함.)
var COMP_NAMING_RULE	= "C";

//Field Default Width											
var FIELD_WIDTH    		  = "100%";									
											
//Field Default Height											
var FIELD_HEIGHT   		  = "40px";									
											
//Label Default Width											
var LABEL_WIDTH    		  = 100;	

//Component Default Type											
var COMP_TYPE     		  = "edit";									
											
//Component Padding											
var COMP_PADDING_LEFT     = 5;											
var COMP_PADDING_TOP      = 5;											
var COMP_PADDING_RIGHT    = 5;											
var COMP_PADDING_BOTTOM   = 5;											
											
//Label Padding											
var LABEL_PADDING_LEFT    = 5;											
var LABEL_PADDING_TOP     = 5;											
var LABEL_PADDING_RIGHT   = 0;											
var LABEL_PADDING_BOTTOM  = 5;											
											
//Gap Between Components (Left and Right)											
var COMP_SPACE     		  = 5;									
											
//Gap Between Components (Top and Bottom)											
var LINE_SPACE     		  = 5;									
											
//Component Default CSS Class											
var COMP_CSSCLASS		  = "";									
											
//Label Default CSS Class											
var LABEL_CSSCLASS		  = "sta_label";
//--------------------------------------------------------------------------------------------------------
//////////////////////////////Constant Setting  END ////////////////////////////////////////////////////											
											
//Model Information											
var oFieldArray;											
											
//View Component Information											
var oContents;											
											
//Option Setting Information											
var oGenerationAttr;											
											
//Component ID List											
var arrCompIds = [];											
											
//Component + Bind Field List											
var arrBindItems = [];									
	
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {

   //Return Value											
    var vResult = "";											
											
    //trace(">> fieldarray : " + fieldarray);											
	//trace(">> contents : " + contents);										
    //trace(">> generationattr : " + generationattr);											
      											
    //Set Model Information as JSON Object											
    if(fieldarray)oFieldArray = JSON.parse(fieldarray);											
    											
	//Set View Component Information as JSON Object 										
    if(contents)oContents = JSON.parse(contents);											
    											
	//Set Setting Information as JSON Object										
    if(generationattr)oGenerationAttr = JSON.parse(generationattr);											
    											
	//Model Information Initialization										
	oContents.View.Model = [];										
											
	//Load Model Information Generation Function										
	fn_GetModel();										
											
	//Load InitValue Information Generation Function										
    oContents.View.InitValue = fn_GetInitValue();											
											
	//Load Object Information Generation Function										
    oContents.View.Objects = fn_GetObjects();											
											
	//Load BindInfo Information Generation Function										
    oContents.View.Bind = fn_GetBind();											
											
	//Load Script Information Generation Function										
    oContents.View.Script = fn_GetScript();											
    											
	//Convert View Component Information into String										
    vResult = JSON.stringify(oContents, null, "\t");											
    											
    //trace(">> vResult : " + vResult);											
    //Return View Component Information											
    return vResult;	
};


/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "grid_type",
                                "edittype": "Enum",                 // edittype : Boolean/String/Number/Enum/ViewObjList
                                "enumlist" : ["singleline","multiline"],
                                "defaultvalue": "singleline",
                                "description": "Select display type"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {

    var strJson = "";								
    var oJson = {								
                        "attributecount": "7",								
                        "attributes": [								
							{	
								"id": "loginbuttontype",
                                "edittype": "Enum",
								"enumlist" : ["right", "bottom"],
                                "defaultvalue": LOGIN_BUTTON_TYPE,								
                                "description": "로그인버튼 위치"								
                            },	
							{				
                                "id": "loginbuttontext",											
                                "edittype": "String",											
                                "defaultvalue": LOGIN_BUTTON_TEXT,											
								"description": "로그인버튼 Text"			
                            },											
							{				
                                "id": "loginbuttoncssclass",											
                                "edittype": "String",											
                                "defaultvalue": LOGIN_BUTTON_CSSCLASS,											
								"description": "로그인버튼 CSS Class Id"			
                            },
							{									
                                "id": "saveidcheckboxuse",									
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList									
                                "defaultvalue": "true",									
                                "description": "아이디저장 체크박스 사용여부"									
                            },
							{									
                                "id": "saveidcheckboxtext",									
                                "edittype": "String",											
                                "defaultvalue": SAVEID_CHECKBOX_TEXT,									
                                "description": "아이디저장 체크박스 Text"									
                            },
							{									
                                "id": "saveidcheckboxcssclass",									
                                "edittype": "String",											
                                "defaultvalue": SAVEID_CHECKBOX_CSSCLASS,									
                                "description": "아이디저장 체크박스 CSS Class Id"									
                            },
							{	
                                "id": "format",								
                                "edittype": "layout",								
								"defaultvalue": "",
								"description": "Set the View Layout"							
                            }								
                        ]								
                  };								
				  				
	strJson = JSON.stringify(oJson, null, "\t");							
    return strJson;	
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
    var strJson = "";									
    									
    // TODO : Write a code that predefines the list of user attributes for adding to the model field.									
     var oJson = {									
                        "attributecount": "8",									
                        "attributes": [									
							{											
                                "id": "comptype",											
                                "edittype": "Enum",											
								"enumlist" : ["button", "combo", "edit", "maskedit", "textarea", "static", "radio", "checkbox", "spin", "calendar", "imageviewer", "progressbar"],			
                                "defaultvalue": COMP_TYPE,											
                                "description": "Types of Components to be Expressed"											
                            },	
							{									
                                "id": "password",									
                                "edittype": "Boolean",									
								"defaultvalue": "false",								
                                "description": "패스워드여부"									
                            },
							{				
                                "id": "fieldwidth",											
                                "edittype": "String",											
								"defaultvalue": FIELD_WIDTH,			
                                "description": "Field Width(px or %)"											
                            },											
							{				
                                "id": "fieldheight",											
                                "edittype": "String",											
								"defaultvalue": FIELD_HEIGHT,			
                                "description": "Field Height(px or %)"											
                            },
							{				
                                "id": "cssclass",											
                                "edittype": "String",											
								"defaultvalue": COMP_CSSCLASS,			
                                "description": "Component CSS Class"											
                            },
							{				
                                "id": "displaynulltext",											
                                "edittype": "String",											
								"defaultvalue": "",			
                                "description": "Field가 빈값일때 표시 할 Text"											
                            },
							{				
                                "id": "labelwidth",											
                                "edittype": "Number",											
								"defaultvalue": LABEL_WIDTH,			
                                "description": "Label Width(px)"											
                            },																					
							{				
                                "id": "labelcssclass",											
                                "edittype": "String",											
								"defaultvalue": LABEL_CSSCLASS,			
                                "description": "Label CSS Class"											
                            }								
                        ]									
                  };									
				  					
		strJson = JSON.stringify(oJson, null, "\t");								
		return strJson;	
}

/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetModel											
 * Parameter    : 											
 * Return       : 											
 * Description  : Model Information Production Function 										
 *---------------------------------------------------------------------------------------------*/											
fn_GetModel = function(){											
 											
	//Import View Component Width Value										
	var nViewCompWidth = oContents.View.referenceinfo.realwidth;										
											
	//Import View Component Height Value										
	var nViewCompHeight = oContents.View.referenceinfo.realheight;										
																				
	//로그인버튼 타입이 none이 아닌경우	로그인버튼 생성							
	if(oGenerationAttr.attributes.loginbuttontype!="none")										
	{										
		//Load Lookup Button Production Function									
		var arrViewSize = fn_MakeLoginButton(nViewCompWidth, nViewCompHeight);									
											
		//Set area excluding lookup button area as component production area									
		nViewCompWidth		= arrViewSize[0];
		nViewCompHeight		= arrViewSize[1];			
	}
	
	//trace("nViewCompHeight 1 : " + nViewCompHeight );
	
	// saveidcheckboxuse값이 true 경우 체크박스 사이즈 빼기
	if (oGenerationAttr.attributes.saveidcheckboxuse)
	{
		nViewCompHeight = nViewCompHeight - fn_GetRealSize(FIELD_HEIGHT, nViewCompHeight, FIELD_HEIGHT);
	}
	
	//trace("nViewCompHeight 2 : " + nViewCompHeight );
	
	//If the format properties are set, produce component-based on layout rules										
	if(oGenerationAttr.attributes.format)										
	{										
		//Import Layout Information									
		var oLayout = oGenerationAttr.attributes.format;									
											
		//Load Layout Calculation Function									
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);									
											
		//Load Layout-based Component Production Function									
		fn_MakeCompByLayout(oLayout);									
	}										
	//If the format properties are not set, create components based on basic rules										
	else										
	{										
		//Import Field Information									
		var arrFieldList = oFieldArray.fields;									
											
		//Import Component Production Direction Information									
		var sDirection = oGenerationAttr.attributes.direction;	
										
		//Import Component Horizontal Alignment Information									
		var sHAlign = oGenerationAttr.attributes.halign;									
											
		//Import Component Vertical Alignment Information									
		var sVAlign = oGenerationAttr.attributes.valign;									
											
		//Load Component Location Calculation Information									
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight, false);									
											
		//Load Component Production Function									
		fn_MakeComp(0, 0, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition, false, true, true);									
	}
	
	// 로그인버튼 사이즈 재설정(임시코딩)
	if (oGenerationAttr.attributes.loginbuttontype == "right") {
		var oModel 			= oContents.View.Model;
		var arrPreComp		= oModel[oModel.length-1].Components;
		var oPreComp		= arrPreComp[arrPreComp.length-1];
		var oPreAttr		= oPreComp.attribute;
		
		var arrLoginComp	= oModel[0].Components;
		var oLoginBtn		= arrLoginComp[arrLoginComp.length-1];
		var oLoginAttr		= oLoginBtn.attribute;
		
		var nHeight			= nexacro.toNumber(oPreAttr.top) + nexacro.toNumber(oPreAttr.height) - nexacro.toNumber(oLoginAttr.top);
		
		oLoginAttr.height = nHeight;
	}
	
	// 아이디저장 체크박스 생성						
	fn_MakeSaveIdCheckbox(nViewCompWidth, nViewCompHeight);
};											
																					
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeLoginButton											
 * Parameter    : nViewCompWidth : View Component Width Value											
				  nViewCompHeight : View Component Height Value							
 * Return       : 											
 * Description  : Lookup Button Creation Function											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeLoginButton = function(nViewCompWidth, nViewCompHeight){											
	//Import Lookup Button Form Information (none, top, middle, bottom, full)										
	var sLoginButtonType = oGenerationAttr.attributes.loginbuttontype;										
											
	//Import Lookup Button CSS Class Information										
	var sLoginButtonCssClass = oGenerationAttr.attributes.loginbuttoncssclass;										
											
	//Import Lookup Button Text Information										
	var sLoginButtonText = oGenerationAttr.attributes.loginbuttontext;										
											
	var oModel = oContents.View.Model;										
	var oField;										
	var oComp;										
											
	var nCompTop;
	var nCompLeft;
	var nCompRigth;										
	var nCompWidth;										
	var nCompHeight;										
	var nCompBottom;										
											
	//Create Field Tag										
	oField = {"fieldid" : "", "Components" : []};										
																				
	//If the lookup button creation location is bottom										
	if(sLoginButtonType=="bottom")										
	{	
		nCompLeft	= LOGIN_BUTTON_PADDING_LEFT;
		nCompRight 	= LOGIN_BUTTON_PADDING_RIGHT;									
		nCompBottom = LOGIN_BUTTON_PADDING_BOTTOM;									
		nCompWidth 	= LOGIN_BUTTON_WIDTH;									
		nCompHeight = LOGIN_BUTTON_HEIGHT;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : LOGIN_BUTTON_ID, "left" : nCompLeft, "height" : nCompHeight, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sLoginButtonCssClass,
				"text" : sLoginButtonText
			}						
		};	
		
		//Set area excluding lookup button area as component production area									
		nViewCompHeight = nViewCompHeight - LOGIN_BUTTON_HEIGHT - LOGIN_BUTTON_PADDING_TOP - LOGIN_BUTTON_PADDING_BOTTOM;
	}
	else if(sLoginButtonType=="right")										
	{	
		nCompTop 	= LOGIN_BUTTON_PADDING_TOP;									
		nCompRight 	= LOGIN_BUTTON_PADDING_RIGHT;									
		nCompWidth 	= LOGIN_BUTTON_WIDTH;									
		nCompHeight = LOGIN_BUTTON_HEIGHT;						// 우선 버튼 기본 사이즈로 설정 후 나머지 컴포넌트 생성하고 사이즈 조절예정							
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnLogin", "top" : nCompTop, "width" : nCompWidth, "right" : nCompRight, "height" : nCompHeight,
				"cssclass" : sLoginButtonCssClass,
				"text" : sLoginButtonText
			}							
		};	
		
		//Set area excluding lookup button area as component production area									
		nViewCompWidth = nViewCompWidth - LOGIN_BUTTON_WIDTH - LOGIN_BUTTON_PADDING_LEFT - LOGIN_BUTTON_PADDING_RIGHT;
	}	
	else if(sLoginButtonType=="rightfull")										
	{	
		nCompTop = LOGIN_BUTTON_PADDING_TOP;									
		nCompRight = LOGIN_BUTTON_PADDING_RIGHT;									
		nCompWidth = LOGIN_BUTTON_WIDTH - LOGIN_BUTTON_PADDING_LEFT - LOGIN_BUTTON_PADDING_RIGHT;									
		nCompBottom = LOGIN_BUTTON_PADDING_BOTTOM;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnLogin", "top" : nCompTop, "width" : nCompWidth, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sLoginButtonCssClass,
				"text" : sLoginButtonText
			}							
		};	
		
		//Set area excluding lookup button area as component production area									
		nViewCompWidth = nViewCompWidth - LOGIN_BUTTON_WIDTH - LOGIN_BUTTON_PADDING_LEFT - LOGIN_BUTTON_PADDING_RIGHT;
	}	
	//If the lookup button creation location is full										
	else										
	{										
		nCompTop = LOGIN_BUTTON_PADDING_TOP;									
		nCompRight = LOGIN_BUTTON_PADDING_RIGHT;									
		nCompWidth = LOGIN_BUTTON_WIDTH - LOGIN_BUTTON_PADDING_LEFT - LOGIN_BUTTON_PADDING_RIGHT;									
		nCompBottom = LOGIN_BUTTON_PADDING_BOTTOM;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnLogin", "top" : nCompTop, "width" : nCompWidth, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sLoginButtonCssClass,
				"text" : sLoginButtonText
			}							
		};									
	}										
											
	//Add Lookup Button Tag										
	oModel[oModel.length] = oField;			
	
	return [nViewCompWidth, nViewCompHeight];
}											

/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeSaveIdCheckbox											
 * Parameter    : 											
 * Return       : 											
 * Description  : ID저장 체크박스 생성 함수											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeSaveIdCheckbox = function(nViewCompWidth, nViewCompHeight){											
	//Import Background Static CSS Class Information										
	var bSaveCheckboxUse = oGenerationAttr.attributes.saveidcheckboxuse;
	
	if (!bSaveCheckboxUse)		return;
	
	var sSaveIdCheckboxText = oGenerationAttr.attributes.saveidcheckboxtext;
	var sSaveIdCheckboxCssClass = oGenerationAttr.attributes.saveidcheckboxcssclass;
											
	var oModel = oContents.View.Model;										
	var oField;										
	var oComp;										
											
	var nCompTop;
	var nCompLeft;
	var nCompRigth;										
	var nCompWidth;										
	var nCompHeight;										
	var nCompBottom;	
	
	var arrPreComp = oModel[oModel.length-1].Components;
	var oPreComp   = arrPreComp[arrPreComp.length-1];
	var oPreAttr   = oPreComp.attribute;
	
	nCompTop 	= nexacro.toNumber(oPreAttr.top) + nexacro.toNumber(oPreAttr.height) + LINE_SPACE;
	nCompLeft	= oPreAttr.left;
	nCompHeight	= fn_GetRealSize(FIELD_HEIGHT, nViewCompHeight, FIELD_HEIGHT) - COMP_PADDING_TOP - COMP_PADDING_BOTTOM;
	nCompRigth	= oPreAttr.right ? oPreAttr.right : COMP_PADDING_RIGHT;
	
	//Add Background Static Component Tag 										
	oModel[oModel.length] =										
	{										
		"fieldid" : "", 
		"Components" :							
		[{
			"tag" : "CheckBox",
			"attribute" :
			{
				"id" : SAVEID_CHECKBOX_ID, "left" : nCompLeft, "top" : nCompTop, "height" : nCompHeight, "right" : nCompRigth, 
				"text" : sSaveIdCheckboxText,
				"cssclass" : sSaveIdCheckboxCssClass
			}
		}]								
	};										
};

/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcLayout											
 * Parameter    : 											
				- oLayout : Layout Setting Information
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height						
 * Return       : 											
 * Description  : Layout Calculation Information											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight){											
	//CellList Information set on Layout										
	var arrCellList = oLayout.celllist;										
											
	//ColumnSize Information set on Layout										
	var arrColSize = oLayout.columnsize;										
											
	//RowSize Information set on Layout										
	var arrRowSize = oLayout.rowsize;										
											
	//CellList Quantity										
	var nCellCnt = arrCellList.length;										
											
	//The Sum of Column/Row Sizes that were not set at -1										
	var nAllColSize = 0;										
	var nAllRowSize = 0;										
											
	//Quantity of Column/Row Size set at -1										
	var nNoColSizeCnt = 0;										
	var nNoRowSizeCnt = 0;										
											
	//Replacement Size if Column/Row Size is -1										
	var nColSizeDef = 0;										
	var nRowSizeDef = 0 ;										
											
	var oCell;										
	var sDirection, sVAlign, sHAlign;										
	var nCol, nRow, nColSpan, nRowSpan;										
	var nColSize, nRowSize;										
											
	var nFieldWidth;										
	var nFieldWidthType;										
	var nFiledWidthMax;										
	var nFieldHeight;										
	var nFieldHeightType;										
	var nFieldHeightMax;										
											
	//Evaluate Sum of Column Sizes that are not set at -1										
	nAllColSize = arrColSize.reduce(function (pre, value){										
		if(value==-1)return pre;									
		else return pre + value;									
	});										
											
	//Evaluate Sum of Row Sizes that are not set at -1										
	nAllRowSize = arrRowSize.reduce(function (pre, value){										
		if(value==-1)return pre;									
		else return pre + value;									
	});										
											
	if(nAllColSize==-1)nAllColSize = 0;										
											
	if(nAllRowSize==-1)nAllRowSize = 0;										
											
	//Evaluate Quantity of Column/Rows set at -1										
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;										
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;										
											
	//If there are Column/Rows set at -1										
	//(View Component Size -(The Sum of Column/Row Sizes not set at -1))/Number of Column/Rows set at -1										
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;										
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;										
											
	//Save Default Column/Row Size on Layout										
	oLayout.colsizedef = nColSizeDef;										
	oLayout.rowsizedef = nRowSizeDef;										
											
	//Evaluate the Field Location Value of each Cell										
	for(var i=0;i<nCellCnt;i++)										
	{										
		//Import Information set on Cell									
		oCell = arrCellList[i];									
		sDirection = oCell.direction;									
		sVAlign = oCell.valign;									
		sHAlign = oCell.halign;									
		nCol = nexacro.toNumber(oCell.col);									
		nRow = nexacro.toNumber(oCell.row);									
		nColSpan = nexacro.toNumber(oCell.colspan);									
		nRowSpan = nexacro.toNumber(oCell.rowspan);									
											
		//Initialize to 1 if there are no Col/RowSpan Values									
		if(!nColSpan)nColSpan = 1;									
		if(!nRowSpan)nRowSpan = 1;									
											
		//Evaluate the Width/Height of that Cell									
		nColSize = fn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);									
		nRowSize = fn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);									
											
		//Save the Width/Height Value on that Cell									
		oCell.realcolsize = nColSize;									
		oCell.realrowsize = nRowSize;									
											
		//If there are fields connected to that Cell									
		if(oCell.fieldlist)									
		{									
			//Evaluate the Field Location Value to input on that Cell								
			oCell.fieldposition = fn_CalcField(sDirection, sVAlign, sHAlign, nColSize, nRowSize, true, oCell.fieldlist);								
		}									
	}										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcField											
 * Parameter    : 											
				- sDirection : Component Production Direction
				- sVAlign : Component Vertical Alignment Method(top|middle|bottom)				
				- sHAlign : Component Horizontal Alignment Method(left|center|right)				
				- nColSize : The Width of The Cell to be Expressed
				- nRowSize : The Height of The Cell to be Expressed
				- bUseLayout : Whether Layout was used
				- arrFieldInCellList : Field List connect to the Cell							
 * Return       : arrFieldPosition : Object Array with Field Location Information											
 * Description  : Function to Evaluate the Field Location Value to be Expressed											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, bUseLayout, arrFieldInCellList){											
	var nLeft = 0;										
	var nTop = 0;										
	var nRowIdx = 0;										
	var nColIdx = 0;										
	var nFiledWidthMax = 0;										
	var nFiledHeightMax = 0;										
											
	var nStartX, nStartY;										
	var nEndX, nEndX;										
	var nTemp;										
											
	//Import Field List Registered to the Model										
	var arrFieldList = oFieldArray.fields;										
											
	//Number of Fields connected to the Cell										
	var nFieldInCellCnt;										
											
	//Object Array to save the Field Location Information										
	var arrFieldPosition = [];										
											
	//Col Size without the Label Area										
	var nRealColSize;										
											
	//Label Width										
	var nLabelWidth;										
											
	//If Layout was used, check the quantity via the field list connected to the cell										
	if(bUseLayout==true)nFieldInCellCnt = arrFieldInCellList.length;										
											
	//If Layout was not used, check the quantity through the number of field list registered to the model										
	else nFieldInCellCnt = arrFieldList.length;										
											
	//If the Component Production Direction is Horizontal										
	//Choose Array, as the x-coordinate for each row is different										
	//Choose Number, as the y-coordinate for each column is identical										
	if(sDirection=="horizontal")										
	{										
		var arrAlignX = [];									
		var nAlignY;									
	}										
	//If the Component Production Direction is Vertical 										
	//Choose Number, as the x-coordinate for each row is identical										
	//Choose Array, as the y-coordinate for each column is different										
	else										
	{										
		var nAlignX;									
		var arrAlignY = [];									
	}										
											
	for(var j=0;j<nFieldInCellCnt;j++)										
	{										
		//If Layout was used									
		//Import Field Information registered on the Model based on the Fields connected to the Cell									
		if(bUseLayout==true)									
		{									
			sFieldId =  arrFieldInCellList[j];								
			oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];								
		}									
		//If Layout was not used 									
		//Import Field Information registered on the Model									
		else									
		{									
			oField = arrFieldList[j];								
			sFieldId = oField.id;								
		}									
											
		//Import Label Width Information set on the current Field									
		nLabelWidth = nexacro.toNumber(oField.labelwidth);									
											
		//Evaluate the Col Size excluding the Label Area									
		nRealColSize = nColSize - nLabelWidth;									
											
		//Evaluate the Width/Height Value where the Field will be expressed									
		nFieldWidth = fn_GetRealSize(oField.fieldwidth, nRealColSize, FIELD_WIDTH);									
		nFieldHeight = fn_GetRealSize(oField.fieldheight, nRowSize, FIELD_HEIGHT);									
											
		//If the Component Production Direction is Horizontal									
		if(sDirection=="horizontal")									
		{									
											
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space								
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx);								
			else nTemp = 0;								
											
			//Start a new line if the Field exceeds the Cell Width								
			if(nLeft+nLabelWidth+nFieldWidth-nTemp>nColSize)								
			{								
				//The Right value of the Field located on the last row							
				nEndX = nLeft;							
											
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space							
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx, nColIdx-1);							
				else nTemp = 0;							
											
				//Evaluate the HAlign Starting Value of this row							
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));							
											
				//Create the starting Left/Top Coordinates of the next row							
				//Set the Bottom value of the Field with the largest Height of this Row as the Top value of the next row							
				nTop += nFiledHeightMax;							
											
				//Initialize the Left Coordinate							
				nLeft = 0;							
											
				//Initialize the largest Height Value							
				nFiledHeightMax = 0;							
											
				//Initialize the Col Index							
				nColIdx = 0;							
											
				//Increase Row Index							
				nRowIdx++;							
											
			}								
											
			//Evaluate the largest Height Value								
			if(nFieldHeight>nFiledHeightMax)nFiledHeightMax = nFieldHeight;								
		}									
		//If the Component Production Direction is Vertical 									
		else									
		{									
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space								
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx);								
			else nTemp = 0;								
											
			//Start a new line if the Field exceeds the Cell Height								
			if(nTop+nFieldHeight-nTemp>nRowSize)								
			{								
				//The Bottom Value of the last Field of this row							
				nEndY = nTop;							
											
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space							
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx, nColIdx-1);							
				else nTemp = 0;							
											
				//Evaluate the VAlign Starting Location Value of this row							
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));							
											
				//Create the starting Left/Top Coordinates of the next row							
				//Set the right value of the field with the largest width of this row as the left value of the next Row							
				nLeft += nFiledWidthMax + nLabelWidth;							
											
				//Initialize Top Coordinate							
				nTop = 0;							
											
				//Initialize the largest Width Value							
				nFiledWidthMax = 0;							
											
				//Initialize the Col Index							
				nColIdx = 0;							
											
				//Increase Row Index							
				nRowIdx++;							
			}								
											
			//Evaluate the largest Width Value								
			if(nFieldWidth>nFiledWidthMax)nFiledWidthMax = nFieldWidth;								
		}									
											
		//Starting Left/Top Location Value of the Field									
		if(j==0)									
		{									
			nStartX = nLeft;								
			nStartY = nTop;								
		}									
											
		//If is it the last Field									
		if(j==nFieldInCellCnt-1)									
		{									
			//If the Component Production Direction is Horizontal								
			if(sDirection=="horizontal")								
			{								
				//The Right value of the Field located on the last row							
				nEndX = nLeft + nLabelWidth + nFieldWidth;							
											
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space							
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx);							
				else nTemp = 0;							
											
				//Evaluate the HAlign Starting Value of this row							
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));							
											
				//The Bottom Value of the Field with the largest Height until the last Field							
				nEndY = nTop + nFiledHeightMax;							
											
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space							
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nRowIdx+1, nRowIdx);							
				else nTemp = 0;							
											
				//Evaluate the VAlign Starting Location Value							
				nAlignY = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));							
			}								
			//If the Component Production Direction is Vertical 								
			else								
			{								
				//The Bottom Value of the last Field of this row 							
				nEndY = nTop+nFieldHeight;							
											
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space							
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx);							
				else nTemp = 0;							
											
				//Evaluate the HAlign Starting Value of this row							
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));							
											
				//The Right Value of the Field with the largest Height until the last Field							
				nEndX = nLeft + nFiledWidthMax + nLabelWidth;							
											
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space							
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nRowIdx+1, nRowIdx);							
				else nTemp = 0;							
											
				//Evaluate the HAlign Starting Value of this row							
				nAlignX = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));							
			}								
		}									
											
		//Save the Field Location Information									
		arrFieldPosition[j] = 
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nFieldWidth,
			"height" : nFieldHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0
		};									
											
		//Set the Left/Top Location Value of the next Field									
		if(sDirection=="horizontal")nLeft += nFieldWidth + nLabelWidth;									
		else nTop += nFieldHeight;									
											
		//Increase Col Index									
		nColIdx++;									
	}										
											
	//Save Align X/Y Value on the Field Location Information										
	if(sDirection=="horizontal")										
	{										
		for(var i=0;i<arrFieldPosition.length;i++)									
		{									
			nRowIdx = arrFieldPosition[i].rowidx;								
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];								
			arrFieldPosition[i].aligny = nAlignY;								
		}									
	}else										
	{										
		for(var i=0;i<arrFieldPosition.length;i++)									
		{									
			nRowIdx = arrFieldPosition[i].rowidx;								
			arrFieldPosition[i].alignx = nAlignX;								
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];								
		}									
	}										
											
	//Return Field Location Information										
	return arrFieldPosition;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeCompByLayout											
 * Parameter    : 											
				- oLayout : Layout Setting Information							
 * Return       : 											
 * Description  : Layout-based Component Production Function											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeCompByLayout = function(oLayout){											
	//CellList Information set on Layout										
	var arrCellList = oLayout.celllist;										
											
	//ColumnSize Information set on Layout										
	var arrColSize = oLayout.columnsize;										
											
	//RowSize Information set on Layout										
	var arrRowSize = oLayout.rowsize;	
											
	//Import Column/Row Default Size										
	var nColSizeDef = oLayout.colsizedef;										
	var nRowSizeDef = oLayout.rowsizedef;										
											
	var nCol, nRow, nColSpan, nRowSpan;										
	var sDirection, sVAlign, sHAlign;										
	var nWidth;										
	var nHeight;
	var bLastRow, bLastCol;
											
	var oCell;										
	var oStatic;										
											
	for(var i=0;i<arrCellList.length;i++)										
	{										
		oCell = arrCellList[i];									
		sDirection = oCell.direction									
		nCol = nexacro.toNumber(oCell.col);									
		nRow = nexacro.toNumber(oCell.row);									
		nColSpan = nexacro.toNumber(oCell.colspan);									
		nRowSpan = nexacro.toNumber(oCell.rowspan);									
											
		//Initialize to 1 if there are no Col/RowSpan Values									
		if(!nColSpan)nColSpan = 1;									
		if(!nRowSpan)nRowSpan = 1;									
											
		//Continue if there are no Fields on the Cell									
		if(!oCell.fieldlist)continue;									
											
		//Import the Left/Top Location Value of the current Cell									
		nLeft = fn_GetCellSize(arrColSize, 0, nCol, nColSizeDef);									
		nTop = fn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef);
		
		// 마지막 Row인지 여부 설정
		bLastRow = arrRowSize.length==nRow + nRowSpan ? true : false;
		
		// 마지막 Col인지 여부 설정
		bLastCol = arrColSize.length==nCol + nColSpan ? true : false;
											
		fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, bLastRow, bLastCol);									
	}										
}											
											
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeComp
 * Parameter    : 
				- nBaseLeft : 컴포넌트를 생성할 기준 좌표(Left)
				- nBaseTop : 컴포넌트를 생성할 기준 좌표(Top)
				- nBaseWidth : 컴포넌트를 생성할 기준 좌표(Width)
				- nBaseHeight : 컴포넌트를 생성할 기준 좌표(Height)
				- sDirection : 컴포넌트 생성 방향
				- arrFieldPosition : Field의 위치정보가 담긴 Object Array
				- bUseLayout : 레이아웃 사용 여부
				- bLastRow : 마지막 Row인지 여부
				- bLastCol : 마지막 Col인지 여부
 * Return       : 
 * Description  : 컴포넌트 태그 생성 함수
 *---------------------------------------------------------------------------------------------*/										
fn_MakeComp = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFields, bUseLayout, bLastRow, bLastCol){											
	var nLabelLeft, nLabelTop, nLabelWidth, nLabelHeight;										
	var nCompLeft, nCompTop, nCompWidth, nCompHeight, nCompRight;										
	var nPosLeft, nPosTop, nPosWidth, nPosHeight;										
	var nLabelAreaWidth;
											
	var oAlignPos;										
	var sFieldId;										
	var oField;										
	var oFieldPosition;										
	var nRowIdx, nColIdx;										
	var nAlignX, nAlignY;
											
	var oModel = oContents.View.Model;										
	var sCompId;										
	var oCompClass;										
	var sCompCssClass;										
	var sLabelCssClass;	
	var sPassWord;
	
	var sLoginButtonType = oGenerationAttr.attributes.loginbuttontype;
	var nLoginGap = COMP_SPACE + LOGIN_BUTTON_PADDING_LEFT;
											
	if(!bUseLayout)bUseLayout = false;										
											
	for(var i=0;i<arrFields.length;i++)										
	{										
		//Import Field Object									
		oFieldPosition = arrFields[i];									
		sFieldId = oFieldPosition.fieldid;									
		oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];		
		
// 		for(var x in oFieldPosition){
// 			trace(x + " : " + oFieldPosition[x]);
// 		}
											
		//Import Component Naming Rule Information									
		oCompClass = fn_GetCompClass(oField.comptype);									
											
		//Import Component Css Class Id Value									
		sCompCssClass = oField.cssclass;									
											
		//Import Label Css Class Id Value									
		sLabelCssClass = oField.labelcssclass;	
		
		sPassWord = oField.password;
											
		//Import Row/Col Index where the Field will be located									
		nRowIdx = oFieldPosition.rowidx;									
		nColIdx = oFieldPosition.colidx;									
											
		//Import Align Location Information of the Field									
		nAlignX = oFieldPosition.alignx;									
		nAlignY = oFieldPosition.aligny;									
											
		//Import Field Location Information									
		nPosLeft = nexacro.toNumber(oFieldPosition.left);									
		nPosTop = nexacro.toNumber(oFieldPosition.top);									
		nPosWidth = nexacro.toNumber(oFieldPosition.width);									
		nPosHeight = nexacro.toNumber(oFieldPosition.height);									
											
		//Import Field Label Width Information									
		nLabelAreaWidth = nexacro.toNumber(oField.labelwidth);									
											
		//Calculate Left/Top Coordinate where Component will be located									
		//Evaluate actual Component Location Information reflecting Align, Padding, Comp/Line Space, etc.									
		//Label Left Coordinate = Cell Left + Field Left + HAlign Starting Coordinate									
		nLabelLeft = nBaseLeft + nPosLeft + nAlignX;									
											
		//Label Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate									
		nLabelTop = nBaseTop + nPosTop + nAlignY;									
											
		//Component Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate									
		nCompTop = nBaseTop + nPosTop + nAlignY;									
											
		if(sDirection=="horizontal")									
		{									
			if(nColIdx!=0)								
			{								
				//Label Left Coordinate = Label Left Coordinate - (Padding Value excluding the Left Padding of the first Label) + (Comp Space*Number of Components)							
				nLabelLeft = nLabelLeft - (LABEL_PADDING_LEFT*nColIdx) - (COMP_PADDING_RIGHT*(nColIdx-1)) + (COMP_SPACE *nColIdx);							
			}else								
			{								
				//Label Left Coordinate = Label Left Coordinate + Label Left Padding							
				nLabelLeft = nLabelLeft + LABEL_PADDING_LEFT;							
			}								
											
			if(nRowIdx!=0)								
			{								
				//Label Top Coordinate = Label Top Coordinate - (Padding Value excluding the Top Padding of the first Label) + (Line Space*Number of Components)							
				nLabelTop = nLabelTop - (LABEL_PADDING_TOP*(nRowIdx-1)) - (LABEL_PADDING_BOTTOM*nRowIdx) + (LINE_SPACE *nRowIdx);							
											
				//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)							
				nCompTop = nCompTop - (COMP_PADDING_TOP*(nRowIdx-1)) - (COMP_PADDING_BOTTOM*nRowIdx) + (LINE_SPACE *nRowIdx);							
			}else								
			{								
				//Label Top Coordinate = Label Top Coordinate + Label Top Padding							
				nLabelTop = nLabelTop + LABEL_PADDING_TOP;							
											
				//Component Top Coordinate = Component Top Coordinate + Component Top Padding							
				nCompTop = nCompTop + COMP_PADDING_TOP;							
			}								
		}else									
		{									
			if(nRowIdx!=0)								
			{								
				//Label Left Coordinate = Label Left Coordinate - (Padding Value excluding the Left Padding of the first Label) + (Comp Space*Number of Components)							
				nLabelLeft = nLabelLeft - (LABEL_PADDING_LEFT*nRowIdx) - (COMP_PADDING_RIGHT*(nRowIdx-1)) + (COMP_SPACE *nRowIdx);							
			}else								
			{								
				//Label Left Coordinate = Label Left Coordinate + Label Left Padding							
				nLabelLeft = nLabelLeft + LABEL_PADDING_LEFT;							
			}								
											
			if(nColIdx!=0)								
			{								
				//Label Top Coordinate = Label Top Coordinate - (Padding Value excluding the Top Padding of the first Label) + (Line Space*Number of Components)							
				nLabelTop = nLabelTop - (LABEL_PADDING_TOP*(nColIdx-1)) - (LABEL_PADDING_BOTTOM*nColIdx) + (LINE_SPACE *nColIdx);							
											
				//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)							
				nCompTop = nCompTop - (COMP_PADDING_TOP*(nColIdx-1)) - (COMP_PADDING_BOTTOM*nColIdx) + (LINE_SPACE *nColIdx);							
			}else								
			{								
				//Label Top Coordinate = Label Top Coordinate + Label Top Padding							
				nLabelTop = nLabelTop + LABEL_PADDING_TOP;							
											
				//Component Top Coordinate = Component Top Coordinate + Component Top Padding							
				nCompTop = nCompTop + COMP_PADDING_TOP;							
			}								
		}									
											
		//Label Width = Label Area Width - Left/Right Padding 									
		nLabelWidth = nLabelAreaWidth - LABEL_PADDING_LEFT - LABEL_PADDING_RIGHT;									
											
		//Label Height = Field Height - Top/Bottom Padding 									
		nLabelHeight = nPosHeight - LABEL_PADDING_TOP - LABEL_PADDING_BOTTOM									
											
		//As the gap between the top and bottom of the label must overlap									
		//Add 1px if it is not the last label									
		if(bLastRow==false)nLabelHeight = nLabelHeight + 1;									
											
		//Component Left Coordinate = Label Left Coordinate + Label Width + Label Right Padding + Component Left Padding									
		nCompLeft = nLabelLeft + nLabelWidth + LABEL_PADDING_RIGHT + COMP_PADDING_LEFT;									
		
		if (sLoginButtonType == "right" && bLastCol) {
			nCompWidth = null;
			nCompRight = LOGIN_BUTTON_ID + ":" + nLoginGap;		// 로그인버튼에서 nLoginGap만큼 띄어서 생성
		} else {
			//Component Width = Field Width - Left/Right Padding 									
			nCompWidth = nPosWidth - COMP_PADDING_LEFT - COMP_PADDING_RIGHT;
			nCompRight = "";
		}
		
		//Component Height = Field Height - Top/Bottom Padding									
		nCompHeight = nPosHeight - COMP_PADDING_TOP - COMP_PADDING_BOTTOM;									
											
		oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};									
											
		//If the Label Width is not 0, Add Label Tag									
		if(nLabelWidth>0)									
		{									
			sCompId = fn_GetCompId("sta_"+sFieldId+"_Label");								
			oComp = {								
						"tag" : "Static",
						"attribute" :
						{
							"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
							, "text" : oField.label, "cssclass" : sLabelCssClass
						}				
					};						
			oModel[oModel.length-1].Components.push(oComp);								
		}									
											
		//Add Component Tag 									
		sCompId = fn_GetCompId(oCompClass.prefix+"_"+sFieldId);									
		oComp =	{								
					"tag" : oCompClass.classId,
					"attribute" :
					{
						"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "height" : nCompHeight, "cssclass" : sCompCssClass
					}					
				};	
		
		// 넓이는 nCompWidth값 있을때 width, 아닌경우는 right 설정
		if(nCompWidth) {
			oComp.attribute.width = nCompWidth;
		} else { 
			oComp.attribute.right = nCompRight;
		}
				
				
		//If the Component Type is Button, add label text to the text properties									
		if(oField.comptype=="button")									
		{									
			oComp.attribute.text = oField.label;								
		}									
		//If the Component Type is Checkbox, add label text to the text properties									
		else if(oField.comptype=="checkbox")									
		{									
			oComp.attribute.text = oField.label;								
		}									
		//If the Component Type is Checkbox, add label text to the text properties									
		else if(oField.comptype=="static")									
		{									
			oComp.attribute.text = oField.label;								
		}else									
		{	
			if(oField.comptype=="edit")									
			{									
				oComp.attribute.password = sPassWord;								
			}
			
			if(oField.displaynulltext)
			{
				oComp.attribute.displaynulltext = oField.displaynulltext;
			}
		
			//In order to process the Bind, add Id, Field Id to BindItems Array								
			arrBindItems[arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId};								
		}									
											
		oModel[oModel.length-1].Components.push(oComp);									
	}
}											
											
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetCompId
 * Parameter    : 
				- sCompId : 생성할 컴포넌트 아이디
 * Return       : sRtnCompId : 컴포넌트 ID
 * Description  : 컴포넌트 ID 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_GetCompId = function(sCompId){
	
	var sNewCompId = "";
	
	if (COMP_NAMING_RULE == "C") {
		sNewCompId = fn_ToCamelCase(sCompId);
	} else if (COMP_NAMING_RULE == "S") {
		sNewCompId = fn_ToSnakeCase(sCompId);
	} else {
		sNewCompId = sCompId;
	}
	//trace("fn_GetCompId() : " + sCompId + " -> " + sNewCompId);
	
	//동일한 Field로 생성된 컴포넌트 있는지 체크
	var arrTemp = arrCompIds.filter(arrCompIds=>arrCompIds.indexOf(sNewCompId)==0);
	var sRtnCompId;
	
	//동일한 Field로 생성된 컴포넌트가 존재할 경우
	if(arrTemp.length>0)sRtnCompId = sNewCompId+"_"+arrTemp.length;
	
	//동일한 Field로 생성된 컴포넌트가 없을 경우 
	else sRtnCompId = sNewCompId;
	
	//컴포넌트 ID관리 Array에 추가
	arrCompIds[arrCompIds.length] = sRtnCompId;
	
	//컴포넌트 ID 리턴
	return sRtnCompId;
}	

fn_ToCamelCase = function(str){
  return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
}

fn_ToSnakeCase = function(str){
	var result = str.toLowerCase().replace( /([A-Z])/g, " $1" );
	return result.split(' ').join('_');

// 	var result = str.replace( /([A-Z])/g, " $1" );
// 	return result.split(' ').join('_').toLowerCase();
// 	
// 	return str.split('').map((character) => {
//         if (character == character.toUpperCase()) {
//             return '_' + character.toLowerCase();
//         } else {
//             return character;
//         }
//     })
//     .join('');
}
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetRealSize											
 * Parameter    : 											
				- sSize : Size Information(% or px)				
				- nParentSize : Size Information of Parent Area
				- sDefSize : Default Size Information								
											
 * Return       : nRealSize : px standard Size											
 * Description  : Function to Evaluate actual usage size based on the registered size											
 *---------------------------------------------------------------------------------------------*/											
fn_GetRealSize = function(sSize, nParentSize, sDefSize){											
	var nRealSize;										
	var nSizeType;										
											
	if(!sSize)sSize = sDefSize;										
											
	nSizeType = sSize.replace(/[0-9]/g, "");										
											
	if(nSizeType=="%")										
	{										
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));									
		nRealSize = (nRealSize/100) * nParentSize;									
	}else										
	{										
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));									
	}										
											
	return nRealSize;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetCellSize											
 * Parameter    : 											
				- arrList : columnsize or rowsize Size Information(% or px)
				- nIdx : Starting Column/Row Index Information
				- nSpan : Column/Row Span Information	
				- nDefSize : Default Size Information to use if -1							
											
 * Return       : nSize : px standard Size											
 * Description  : Cell Width/Height Evaluation Function											
 *---------------------------------------------------------------------------------------------*/											
fn_GetCellSize = function(arrList, nIdx, nSpan, nDefSize){											
	var nSize = 0;										
											
	for(var i=nIdx; i<nIdx+nSpan; i++)										
	{										
		if(nexacro.toNumber(arrList[i])==-1)									
		{									
			nSize += nexacro.toNumber(nDefSize);								
		}else									
		{									
			nSize += nexacro.toNumber(arrList[i]);								
		}									
	}										
											
	return nSize;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcPaddingToSpace											
 * Parameter    : 											
				- sType : Col or Row	
				- nIdx1 : Component Index Value to Calculate Padding
				- nIdx2 : Component Index Value to Calculate Padding + Space							
 * Return       : nTemp : Calibrated px value											
 * Description  : If the interval value set as padding is converted to Padding + CompSpace or LineSpace											
                  Function to evaluate px value that needs calibration											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcPaddingToSpace = function(sType, nIdx1, nIdx2){											
	var nTemp;										
											
	//Formula to calibrate the location as the gap between components is calculated with Comp/Line Space instead of Padding information										
	//Component Padding Formula = (Component Left/Right Padding * Component number)										
	//Component Space Formula = (Left/Top Padding of the First Component + Right/Bottom Padding of Last Component + Space * Component number)										
	//Calculate difference = Component Padding Formula - Component Space Formula										
	if(sType=="Col")										
	{										
		nTemp = ((LABEL_PADDING_LEFT+COMP_PADDING_RIGHT) * nIdx1) - (LABEL_PADDING_LEFT + COMP_PADDING_RIGHT + (COMP_SPACE * nIdx2));									
	}else										
	{										
		nTemp = ((LABEL_PADDING_TOP+LABEL_PADDING_BOTTOM) * nIdx1) - (LABEL_PADDING_TOP + LABEL_PADDING_BOTTOM + (LINE_SPACE * nIdx2));									
	}										
											
	return nTemp										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcAlignPos											
 * Parameter    : 											
				- sAlign : Component Alignment Method
				- nParentSize : Size of Parent Area
				- nSize : Size of Component Area							
 * Return       : nRtnValue : px value of Starting Location											
 * Description  : Evaluate the Align Starting Location Value of the Row/Col											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcAlignPos = function(sAlign, nParentSize, nSize){											
	var nRtnValue;										
											
	if(sAlign=="center"||sAlign=="middle")nRtnValue = (nParentSize - nSize)/2;										
	else if(sAlign=="right"||sAlign=="bottom")nRtnValue = nParentSize - nSize;										
	else nRtnValue = 0;										
											
	if(nRtnValue<0)nRtnValue = 0;										
											
	return nRtnValue;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetInitValue											
 * Parameter    : 											
 * Return       : initvalue contents (JSON format)											
 * Description  : Function to generate <InitValue> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetInitValue = function(){											
    											
    var oInitValue = [];											
    											
    return oInitValue;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetObjects											
 * Parameter    : 											
 * Return       : objects contents (JSON format)											
 * Description  : Function to generate <Objects> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetObjects = function(){											
    											
    //Initialize Object											
    var oObjects = [];											
    											
    //Object Information Setting											
    oObjects =     											
    [											
        {											
            "tag": "Dataset",											
            "attribute": { "id": "viewdataset" },											
            "Dataset": [											
            {											
                "tag": "ColumnInfo",											
                "attribute": {},											
                //Load Column Information Setting Function											
                "ColumnInfo": fn_GetDsColumns()											
            },											
            {											
                "tag": "Rows",											
                "attribute": {},											
                //Load Row Information Setting Function											
                "Rows": fn_GetDsRows()											
            }]											
        }											
    ];											
    											
    //Return Object Information											
    return oObjects;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetBind											
 * Parameter    : 											
 * Return       : bind contents (JSON format)											
 * Description  : Function to generate <Bind> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetBind = function(){											
    											
    var oBind = [];											
    var oBindItems = [];											
    											
    var sCompId											
    var sFieldId;											
	var sBindDataset = "viewdataset";										
	var nBindItemCount = arrBindItems.length;										
        											
    for(var i=0;i<nBindItemCount;i++)											
    {    											
        sCompId = arrBindItems[i].compid;											
		sFieldId = arrBindItems[i].fieldid;									
        											
        oBindItems[i] = 											
        {											
            "tag" : "BindItem",											
            "attribute" : 											
            {											
                "id" : "bind_"+sCompId, "compid" : sCompId, "propid" : "value", "datasetid" : sBindDataset, "columnid" : sFieldId											
            }											
        }											
    }											
    											
    oBind[oBind.length] = {"tag" : "Bind", "Bind" : oBindItems};											
    											
    return oBind;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetScript											
 * Parameter    : 											
 * Return       : script contents (JSON format)											
 * Description  : Function to generate <Script> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetScript = function(){											
    var oScript = {};											
    											
    /*											
    oScript = 											
    {											
        "tag": "Script",											
        "attribute": { "type" : "xscript5.1" },											
        "value": "this.fn_Alert = function(){this.alert('MESSAGE')};"											
    }											
    */											
    											
    return oScript;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetCompClass											
 * Parameter    : 											
 *                - sCompType : CompType of field											
 * Return       : component class data											
 * Description  : Returns class information of the component based on Field data											
 *---------------------------------------------------------------------------------------------*/											
fn_GetCompClass = function(sCompType){											
	var oCompClass = { "classId" : null, "prefix" : null };										
											
	switch(sCompType)										
	{										
		case "button" : oCompClass.classId = "Button";									
						oCompClass.prefix = "btn";					
						break;					
		case "combo" : oCompClass.classId = "Combo";									
						oCompClass.prefix = "cmb";					
						break;					
		case "edit" : oCompClass.classId = "Edit";									
						oCompClass.prefix = "edt";					
						break;					
		case "maskedit" : oCompClass.classId = "MaskEdit";									
						oCompClass.prefix = "msk";					
						break;					
		case "textarea" : oCompClass.classId = "TextArea";									
						oCompClass.prefix = "ta";					
						break;					
		case "static" : oCompClass.classId = "Static";									
						oCompClass.prefix = "st";					
						break;					
		case "radio" : oCompClass.classId = "Radio";									
						oCompClass.prefix = "rdo";					
						break;					
		case "checkbox" : oCompClass.classId = "CheckBox";									
						oCompClass.prefix = "chk";					
						break;					
		case "spin" : oCompClass.classId = "Spin";									
						oCompClass.prefix = "spn";					
						break;					
		case "calendar" : oCompClass.classId = "Calendar";									
						oCompClass.prefix = "cal";					
						break;					
		case "imageviewer" : oCompClass.classId = "ImageViewer";									
						oCompClass.prefix = "img";					
						break;					
		case "progressbar" : oCompClass.classId = "ProgressBar";									
						oCompClass.prefix = "prg";					
						break;					
		default : oCompClass.classId = "Static";									
				  oCompClass.prefix = "st";							
	}										
											
    //Return Component Information											
    return oCompClass;											
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetDsColumns											
 * Parameter    : 											
 * Return       : dataset column(s) data											
 * Description  : Function to generate <Column> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetDsColumns = function(){											
    var i;											
    var oColumns = [];											
    											
    var oField;											
    var sFieldId;											
    var sDataType;											
    var sDataSize;											
    											
    //Import Model Field Quantity											
    var nCount = oFieldArray.fieldcount;											
    											
    //Create Column Information based on model field number											
    for(i=0;i<nCount;i++)											
    {											
        oField = oFieldArray.fields[i];											
        											
        sFieldId = oField.id;											
        sDataType = oField.datatype;											
        sDataSize = oField.datasize;											
        											
		if(oField.comptype!="button")									
		{									
			oColumns[i] = 								
			{								
				"tag": "Column",
				"attribute": 
				{
					"id": sFieldId, "type": sDataType, "size": sDataSize
				}				
			};								
		}									
    }											
    											
    //Return Column Information											
    return oColumns;											
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetDsRows											
 * Parameter    : 											
 * Return       : dataset row(s) data											
 * Description  : Function to generate <Row> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetDsRows = function(){											
    var i;											
    var oRows = [];											
    var oRow = [];											
    											
    var oField;											
    var sFieldId;											
    											
    //Number of Rows											
    var nRowCnt = 1;											
											
    //Number of Columns											
    var nColCnt = oFieldArray.fieldcount;											
    											
    for(i=0;i<nRowCnt;i++)											
    {											
        oRow = [];											
        											
        //Add Row Information to Rows											
        oRows[i] = {"tag": "Row",    "attribute": {},"Row": oRow};											
    }											
    											
    //Return Rows Information											
    return oRows;											
}]]></Script>
</ViewTemplateInfo>
