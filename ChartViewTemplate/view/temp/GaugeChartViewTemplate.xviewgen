<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="ColumnChartViewTemplate" viewtype="Chart" description="게이지 차트(GaugeChart)를 그려주는 템플릿"/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  [Chart] GaugeChart View Template
*  @FileName 	GaugeChartViewTemplate.xviewgen 
*  @Creator 	Creator
*  @CreateDate 	2022.03.24
*  @Desction    게이지 차트(GaugeChart)를 그려주는 템플릿
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2022.03.24     		Creator       	      		최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "view_lib::util.xjs";
include "view_lib::common.xjs";
include "view_lib::chart.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {

	//리턴 값
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);

    //모델정보를 JSON 오브젝트로 설정
    if(fieldarray)this.oFieldArray = JSON.parse(fieldarray);

	//뷰 컴포넌트 정보를 JSON 오브젝트로 설정
    if(contents)this.oContents = JSON.parse(contents);

	//옵션 설정 정보를 JSON 오브젝트로 설정
    if(generationattr)this.oGenerationAttr = JSON.parse(generationattr);

	//모델정보 초기화
	this.oContents.View.Model = [];

	//모델정보 생성 함수 호출
	fn_GetModel();

	//InitValue 정보 생성 함수 호출
    this.oContents.View.InitValue = fn_GetInitValue();

	//Object 정보 생성 함수 호출
    this.oContents.View.Objects = fn_GetObjects();

	//Script 정보 생성 함수 호출
    this.oContents.View.Script = fn_GetScript();

	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
    //뷰 컴포넌트 정보 리턴
    return vResult;
};


/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {
	var arrColorSet = this.arrBaseChartColor;
	arrColorSet.push(this.ENUM_INPUT);

    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
							{
                                "id": "chartdisplay",
                                "edittype": "Enum",
                                "defaultvalue": "gauge",
                                "enumlist" : ["circle", "semicircle","gauge",this.ENUM_INPUT],
                                "description": "게이지 표시모양(각도)"
												+ "\n" + " - circle : 원"
												+ "\n" + " - semicircle : 반원"
												+ "\n" + " - gauge : 계기판"
												+ "\n" + " - " + this.ENUM_INPUT + " : 직접입력(startangle,displayangle)"
                            }
							, {
                                "id": "startangle",
                                "edittype": "Number",
                                "defaultvalue": "0",
                                "description": "게이지 시작각도"
								+ "\n" + " (chartdisplay 값이 '" + this.ENUM_INPUT + "' 인 경우에만 동작.)"
                            }
							, {
                                "id": "displayangle",
                                "edittype": "Number",
                                "defaultvalue": "360",
                                "description": "시작각도부터 표시할 각도"
								+ "\n" + " (chartdisplay 값이 '" + this.ENUM_INPUT + "' 인 경우에만 동작.)"
                            }
							, {
                                "id": "gaugemin",
                                "edittype": "Number",
                                "defaultvalue": "0",
                                "description": "게이지 최소값"
                            }
							, {
                                "id": "gaugemax",
                                "edittype": "Number",
                                "defaultvalue": "100",
                                "description": "게이지 최대값"
                            }
							, {
                                "id": "chartcolorset",
                                "edittype": "Enum",
                                "defaultvalue": this.lfn_GetChartColor(0,arrColorSet),		// 첫번째를 디폴트값으로 설정
                                "enumlist" : arrColorSet,
                                "description": "게이지 색상 선택"
                            }
							, {
                                "id": "chartcolor",
                                "edittype": "String",
                                "defaultvalue": "",
                                "description": "게이지 색상(16진 색상코드) 입력"
								+ "\n" + " (chartcolorset 값이 '" + this.ENUM_INPUT + "' 인 경우에만 동작.)"
                            }
							, {
                                "id": "innerradius",
                                "edittype": "Number",
                                "defaultvalue": "70",
                                "description": "게이지차트의 안쪽 원의 지름 크기(%)"
                            }
							, {									
                                "id": "visibleindicator",									
                                "edittype": "Boolean",									
                                "defaultvalue": "true",									
                                "description": "게이지 지표선 보일지 여부"									
                            }
							, {									
                                "id": "enableanimation",									
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList									
                                "defaultvalue": "true",									
                                "description": "Series 에 애니메이션 효과를 적용 시킬지 설정"									
                            }
							, {									
                                "id": "titletext",									
                                "edittype": "String",											
                                "defaultvalue": "",									
                                "description": "타이틀 Text"									
                            }
							, {									
                                "id": "subtitletext",									
                                "edittype": "String",											
                                "defaultvalue": "",									
                                "description": "서브타이틀 Text"									
                            }
							, {
                                "id": "titlealign",
                                "edittype": "Enum",
                                "defaultvalue": "topcenter",
                                "enumlist" : ["topleft", "topcenter", "topright", "bottomleft", "bottomcenter", "bottomright", "lefttop", "leftcenter", "leftbottom", "righttop", "rightcenter", "rightbottom"],
                                "description": "타이틀 표시 위치"
                            }
							, {
                                "id": "legendposition",
                                "edittype": "Enum",
                                "defaultvalue": "bottomcenter",			// [GaugeChart] 
                                "enumlist" : ["none", "topleft", "topcenter", "topright", "bottomleft", "bottomcenter", "bottomright", "lefttop", "leftcenter", "leftbottom", "righttop", "rightcenter", "rightbottom"],
                                "description": "범례 표시 위치"
                            }
							, {
                                "id": "itemtextposition",
                                "edittype": "Enum",
                                "defaultvalue": "gaugecenter",			// [GaugeChart]
                                "enumlist" : ["none", "start", "middle", "end", "gaugecenter"],
                                "description": "값 표시 위치"
                            }
                        ]
                  };
				  
	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";

	var oFieldAttr = {
                        "attributes": [
                            {
                                "id"			: "displaytype",
                                "edittype"		: "Enum",
								"enumlist" 		: ["none", "category", "series"],
                                "defaultvalue"	: "none",
                                "description"	: "데이터 표현방식"
												+ "\n" + " - category : 데이터명 Field(1개)"
												+ "\n" + " - series : 데이터값 Field(1개)"
                            }
                        ]
                  };
				  
	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");

    return sFieldAttr;
}
 
/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : model contents (JSON format)
 * Description  : Function to generate a component source based on field information of the model entered by the user
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(){

	// Chart Attribute
	var oChartAttr = {};
	var oTitle = {};
	var oLegend = {};
	var oIndicator = {};
	
	var sIndicator = this.oGenerationAttr.attributes.visibleindicator;
	var sTitletext = this.oGenerationAttr.attributes.titletext;
	var sSubTitletext = this.oGenerationAttr.attributes.subtitletext;
	var sTitleAlign = this.oGenerationAttr.attributes.titlealign;
	var sLegendPosition = this.oGenerationAttr.attributes.legendposition;
	
	//모델 필드 갯수 가져오기
    var nFieldCount = this.oFieldArray.fieldcount;
	
	// 카테고리 필드
	var oCategoryField;
	
	var arrField = new Array();
	var arrSeriesField = new Array();

	var sDisplaytype;
	
	//차트에서 사용할 모델 Field ID 리스트 만들기
    for(i=0;i<nFieldCount;i++)
    {
        oField = this.oFieldArray.fields[i];
		sDisplaytype = oField.displaytype;
		
		// this.oFieldArray Json Data로 Field Array() 셋팅
		arrField.push(oField.id);
		
		// displaytype에 따라 Array() 셋팅
		if (sDisplaytype == "category") {
			if(this.lfn_IsNull(oCategoryField)) {
				oCategoryField = oField;
			} else {
				this.lfn_Log("category가 여러개 설정되었습니다.(1개의 필드만 설정가능합니다)","warn");
			}
			
		} else if (sDisplaytype == "series") {
			if (arrSeriesField.length == 0) {
				arrSeriesField.push(oField);
			} else {
				this.lfn_Log("series가 여러개 설정되었습니다.(1개의 필드만 설정가능합니다.)","warn");
			}
		}
    }
	
	// 차트 기본속성 셋팅
	oChartAttr = this.lfn_CloneObject(this.oBaseChartAttr);
	
	// 차트유형설정
	oChartAttr["gaugetype"] = "circular";
	
	// 인디케이터 설정
	oIndicator = this.lfn_CloneObject(this.oBaseIndicator);
	oIndicator["visible"] = sIndicator;
	
	// 에니메이션 설정
	oChartAttr["enableanimation"] = this.oGenerationAttr.attributes.enableanimation;
	
	// 타이틀설정
	oTitle = this.lfn_CloneObject(this.oBaseTitle);
	if (this.lfn_IsNotNull(sTitletext) || this.lfn_IsNotNull(sSubTitletext)) {
		oTitle["text"] = sTitletext;
		oTitle["subtext"] = sSubTitletext;
		oTitle["align"] = sTitleAlign;
		oTitle["visible"] = true;
	}
				
	// 범례 설정
	oLegend = this.lfn_CloneObject(this.oBaseLegend);
	if (this.lfn_IsNotNull(sLegendPosition) && sLegendPosition != "none")
	{
		oLegend["align"] = sLegendPosition;
		oLegend["visible"] = true;
	}
	
	// 카테고리 설정
	if(this.lfn_IsNull(oCategoryField)) {
		this.lfn_Log("category가 설정되지 않았습니다.","warn");
	} else {
		oChartAttr["categorycolumn"] = "bind:" + oCategoryField.id;
	}
	
	//차트 컴포넌트 추가
	var oModel = this.oContents.View.Model;
    oModel[oModel.length] = {
            "fieldid" : arrField.join(","),
            "Components" :
            [
                {
                    "tag" : "GaugeChart",
                    "attribute" : oChartAttr,
                    "GaugeChart" :
                    [
                        {
                            "tag"	: "Contents",
							"value"	: {
								"title" 		: oTitle,
								"legend" 		: oLegend,
								"tooltip" 		: this.oBaseTooltip,
								"board" 		: this.oBaseBoard,
								"indicator"		: oIndicator,
								"valueaxes" 	: fn_GetValueAxes(arrSeriesField),
								"seriesset" 	: fn_GetSeries(arrSeriesField)
							}
                        }
                    ]
                }
            ]
        }

	//생성할 Model 정보 리턴
    return oModel;
};

// 데이터 축 설정
fn_GetValueAxes = function(arrAxisYField)
{
	var nGaugeMin = nexacro.toNumber(this.oGenerationAttr.attributes.gaugemin,0);		// [GaugeChart]	
	var nGaugeMax = nexacro.toNumber(this.oGenerationAttr.attributes.gaugemax,100);		// [GaugeChart]	
	
	var arrValueAxes = new Array();
	var oValueAxes;
	
	var arrMaskInfo = new Array();
	var oField;
	
	// 기본y축 추가
	oValueAxes = {};
	oValueAxes = this.lfn_CloneObject(this.oBaseValueaxis);
	oValueAxes["id"] = "valueaxis";
	oValueAxes["tickmin"] = nGaugeMin;
	oValueAxes["tickmax"] = nGaugeMax;
	oValueAxes["tickinterval"] = "10";
	
	if (arrAxisYField.length == 0) {
		this.lfn_Log("series가 설정되지 않았습니다.","warn");
	} else {
		oFieldy = arrAxisYField[0];				// 첫번째 시리즈 기준으로 축값 설정
		arrMaskInfo = this.lfn_GetDataTypeMask(oFieldy.datatype);
		oValueAxes["labelmask"] = arrMaskInfo[0];
		oValueAxes["labeltype"] = arrMaskInfo[1];
	}
	
	arrValueAxes.push(oValueAxes);
	
    return arrValueAxes;
};

// 시리즈 셋팅
fn_GetSeries = function(arrSeriesField)
{
	var sChartDisplay = this.oGenerationAttr.attributes.chartdisplay;
	var nStartAngle = this.oGenerationAttr.attributes.startangle;
	var nDisplayAngle = this.oGenerationAttr.attributes.displayangle;
	var sChartColorSet = this.oGenerationAttr.attributes.chartcolorset;
	var sChartColor = this.oGenerationAttr.attributes.chartcolor;
	var nInnerRadius = this.oGenerationAttr.attributes.innerradius;
	var sIndicator = this.oGenerationAttr.attributes.visibleindicator;
	var sItemTextPosition = this.oGenerationAttr.attributes.itemtextposition;
	
	// 차트각도 설정
	var nSetStartAngle = 0;
	var nSetEndAngle = 360;
	if (sChartDisplay == this.ENUM_INPUT
		&& this.lfn_IsNotNull(nStartAngle) && this.lfn_IsNotNull(nDisplayAngle)) {
		nSetStartAngle = nStartAngle;
		nSetEndAngle = nDisplayAngle;
	} else {
		if (sChartDisplay == "semicircle") {
			nSetStartAngle = 270;
			nSetEndAngle = 180;
		} else if (sChartDisplay == "gauge") {
			nSetStartAngle = 210;
			nSetEndAngle = 300;
		}
	}
	
	// 차트색상 설정(sChartColorSet값이 "input"이고 sChartColor값이 있는 경우,  sChartColor, 아니면 sChartColorSet)
	var sSetColor = "";
	if (sChartColorSet == this.ENUM_INPUT
		&& this.lfn_IsNotNull(sChartColor)) {
		sSetColor = sChartColor;
	} else {
		sSetColor = sChartColorSet;
	}
	
	var arrSeries = new Array();
	var oSeries;
	
	var oField;
	var arrMaskInfo = new Array();
	
	var nCount = arrSeriesField.length;
	
	// arrSeriesField 갯수 기준으로 series 태그 생성
	for(var i=0;i<nCount;i++)
	{
		oField = arrSeriesField[i];
		
		oSeries = {};
		oSeries = this.lfn_CloneObject(this.oBaseSeriesGauge);
		oSeries["id"] = this.lfn_GetCompId("series" + " " + oField.id);
		oSeries["titletext"] = oField.label;
		oSeries["valuecolumn"] = "bind:" + oField.id;
		
		// 각도설정
		oSeries["startangle"] = nSetStartAngle;
		oSeries["endangle"] = nSetEndAngle;
		
		// 색상설정
		if (sSetColor.indexOf("[") >= 0) {			// [GaugeChart] Array형식인 경우 userrange로 설정함.
			oSeries["baropacity"] = "0";
			oSeries["barsize"] = "0";
			oSeries["opacity"] = "1";
			oSeries["userrange"] = sSetColor;
			oSeries["innerradius"] = nInnerRadius;
			oSeries["userrangeinnerradius"] = nInnerRadius;
		} else {									// [GaugeChart] 색상을 설정한 경우
			oSeries["barfillstyle"] = sSetColor;
			oSeries["barlinestyle"] = "1px solid " + sSetColor;
			oSeries["opacity"] = "0.5";
			oSeries["fillstyle"] = sSetColor;
			oSeries["linestyle"] = "1px solid " + sSetColor;
			oSeries["itemtextcolor"] = sSetColor;
			oSeries["innerradius"] = nInnerRadius;
		}
		
		// 데이터 출력설정
		if (sItemTextPosition == "none") {
			oSeries["itemtextvisible"] = false;
		} else {
			arrMaskInfo = this.lfn_GetDataTypeMask(oField.datatype);
			
			oSeries["itemtextvisible"] 		= true;
			oSeries["itemtextmask"]			= arrMaskInfo[0];
			oSeries["itemtexttype"]			= arrMaskInfo[1];
			
			oSeries["itemtextposition"] 	= sItemTextPosition;
			
			if (sIndicator == "true" && sItemTextPosition == "gaugecenter") {
				oSeries["itemtextgap"] = "0 50";
			}
		}
		
		arrSeries.push(oSeries);
	}
	
    return arrSeries;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function(){

    var oInitValue = [];
    /*
    oInitValue =
    [
        {
            "tag" : "initValue",
            "initValue" :
            [
                {
                    "tag" : "Button",
                    "attribute" :
                    {
                        "id" : "btnSearch", "text" : "Search11"
                    }
                }
            ]
        }
    ];
    */
    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function(){

	//오브젝트 정보 초기화
    var oObjects = [];

	//오브젝트 정보 설정
    oObjects =
    [
        {
            "tag": "Dataset",
            "attribute": { "id": "viewdataset" },
            "Dataset": [
                {
                    "tag": "ColumnInfo",
                    "attribute": {},
					//데이터셋 컬럼정보 설정함수 호출
                    "ColumnInfo": fn_GetDsColumns()
                },
                {
                    "tag": "Rows",
                    "attribute": {},
					//데이터셋 로우정보 설정함수 호출
                    "Rows": fn_GetDsRows()
                }
            ]
        }
    ];

    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function(){

	//스크립트 정보 초기화
    var oScript = {};

	//스크립트 정보 리턴
    return oScript;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsColumns
 * Parameter    :
 *                - this.oFieldArray : model field data
 * Return       : dataset column(s) data
 * Description  : Function to generate <Column> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsColumns = function(){
    var i;
    var oColumns = [];

    var oField;
    var sFieldId;
    var sDataType;
    var sDataSize;

    //모델 Field 개수 가져오기
    var nCount = this.oFieldArray.fieldcount;

    //모델 Field 개수 만큼 컬럼 정보 만들기
    for(i=0;i<nCount;i++)
    {
        oField = this.oFieldArray.fields[i];

        sFieldId = oField.id;
        sDataType = oField.datatype;
        sDataSize = oField.datasize;

        oColumns[i] =
        {
            "tag": "Column",
            "attribute":
            {
                "id": sFieldId, "type": sDataType, "size": sDataSize
            }
        };
    }

    //컬럼 정보 리턴
    return oColumns;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsRows
 * Parameter    :
 *                - this.oFieldArray : model field data
 * Return       : dataset row(s) data
 * Description  : Function to generate <Row> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsRows = function(){
    var i;
    var oRows = [];
    var oRow = [];

    var oField;
    var sFieldId;

    //로우 개수
    var nRowCnt = 1;

    //컬럼 개수
    var nColCnt = this.oFieldArray.fieldcount;

    for(i=0;i<nRowCnt;i++)
    {
        oRow = [];

        //Row정보 Rows에 추가
        oRows[i] = {"tag": "Row",    "attribute": {},"Row": oRow};
    }

    //Rows 정보 리턴
    return oRows;
}]]></Script>
</ViewTemplateInfo>
