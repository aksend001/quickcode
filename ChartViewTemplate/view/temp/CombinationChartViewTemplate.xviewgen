<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="ColumnChartViewTemplate" viewtype="Chart" description="혼합 차트(CombinationChart)를 그려주는 템플릿&#13;&#10;- 각 시리즈 데이터를 막대, 선, 영역으로 표현하는 차트를 그려주는 템플릿"/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  [Chart] CombinationChart View Template
*  @FileName 	CombinationChartViewTemplate.xviewgen 
*  @Creator 	Creator
*  @CreateDate 	2022.03.28
*  @Desction    혼합 차트(CombinationChart)를 그려주는 템플릿
*  					- 각 시리즈 데이터를 막대, 선, 영역으로 표현하는 차트를 그려주는 템플릿
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2022.03.28     		Creator       	      		최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "view_lib::util.xjs";
include "view_lib::common.xjs";
include "view_lib::chart.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
this.SERIES_LINE_STYLE = "1px solid";				// 시리즈 선 스타일
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {

	//리턴 값
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);

    //모델정보를 JSON 오브젝트로 설정
    if(fieldarray)this.oFieldArray = JSON.parse(fieldarray);

	//뷰 컴포넌트 정보를 JSON 오브젝트로 설정
    if(contents)this.oContents = JSON.parse(contents);

	//옵션 설정 정보를 JSON 오브젝트로 설정
    if(generationattr)this.oGenerationAttr = JSON.parse(generationattr);

	//모델정보 초기화
	this.oContents.View.Model = [];

	//모델정보 생성 함수 호출
	fn_GetModel();

	//InitValue 정보 생성 함수 호출
    this.oContents.View.InitValue = fn_GetInitValue();

	//Object 정보 생성 함수 호출
    this.oContents.View.Objects = fn_GetObjects();

	//Script 정보 생성 함수 호출
    this.oContents.View.Script = fn_GetScript();

	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
    //뷰 컴포넌트 정보 리턴
    return vResult;
};


/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {

    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
							{									
                                "id": "enableanimation",									
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList									
                                "defaultvalue": "true",									
                                "description": "Series 에 애니메이션 효과를 적용 시킬지 설정"									
                            }
							, {									
                                "id": "titletext",									
                                "edittype": "String",											
                                "defaultvalue": "",									
                                "description": "타이틀 Text"									
                            }
							, {									
                                "id": "subtitletext",									
                                "edittype": "String",											
                                "defaultvalue": "",									
                                "description": "서브타이틀 Text"									
                            }
							, {
                                "id": "titlealign",
                                "edittype": "Enum",
                                "defaultvalue": "topcenter",
                                "enumlist" : ["topleft", "topcenter", "topright", "bottomleft", "bottomcenter", "bottomright", "lefttop", "leftcenter", "leftbottom", "righttop", "rightcenter", "rightbottom"],
                                "description": "타이틀 표시 위치"
                            }
							, {
                                "id": "legendposition",
                                "edittype": "Enum",
                                "defaultvalue": "rightcenter",
                                "enumlist" : ["none", "topleft", "topcenter", "topright", "bottomleft", "bottomcenter", "bottomright", "lefttop", "leftcenter", "leftbottom", "righttop", "rightcenter", "rightbottom"],
                                "description": "범례 표시 위치"
                            }
							, {									
                                "id": "valueaxistitletext",									
                                "edittype": "String",											
                                "defaultvalue": "",									
                                "description": "데이터축 타이틀 Text(여러 축 설정시 ,를 구분자로 여러개 입력)"									
                            }
							, {
                                "id": "baritemtextposition",			// [CombinationChart]
                                "edittype": "Enum",
                                "defaultvalue": "none",
                                "enumlist" : ["none", "start", "middle", "end", "outside"],
                                "description": "seriesdisplay이 'bar'일때 값 표시 위치"
                            }
							, {
                                "id": "lineareaitemtextposition",		// [CombinationChart]
                                "edittype": "Enum",
                                "defaultvalue": "none",
                                "enumlist" : ["none", "lefttop", "centertop", "righttop", "leftmiddle", "centermiddle", "rightmiddle", "leftbottom", "centerbottom", "rightbottom"],
                                "description": "seriesdisplay이 'line', 'linepoint','area'일때 값 표시 위치"
                            }
                        ]
                  };
				  
	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";

	var oFieldAttr = {
                        "attributes": [
                            {
                                "id"			: "displaytype",
                                "edittype"		: "Enum",
								"enumlist" 		: ["none", "category", "series"],
                                "defaultvalue"	: "series",
                                "description"	: "데이터 표현방식"
												+ "\n" + " - none : 사용안함"
												+ "\n" + " - category : 데이터명 Field(1개)"
												+ "\n" + " - series : 데이터값 Field(n개)"
                            }
							, {
                                "id"			: "seriesdisplay",
                                "edittype" 		: "Enum",
								"enumlist" 		: ["bar", "line", "linepoint","area"],
								"defaultvalue"	: "bar",
                                "description"	: "시리즈를 표시할 차트유형 설정"
												+ "\n" + " - bar : 막대 그래프"
												+ "\n" + " - line : 선 그래프"
												+ "\n" + " - linepoint : 선 + 점 그래프"
												+ "\n" + " - area : 영역형 그래프"
                            }
							, {
                                "id"			: "linetype",
                                "edittype"		: "Enum",
                                "defaultvalue"	: "segment",
                                "enumlist" 		: ["segment", "step", "curve"],
                                "description"	: "선그래프 유형을 설정. (seriesdisplay이 'line', 'linepoint','area'일때 동작)"
												+ "\n" + " - segment : 꺽은선 차트"
												+ "\n" + " - step : 스텝 차트"
												+ "\n" + " - curve : 곡선 차트"
                            }
							, {
                                "id"			: "valueaxes",
                                "edittype" 		: "Enum",
								"enumlist" 		: ["y", "y1", "y2"],
								"defaultvalue"	: "y",
                                "description"	: "데이터축을 설정. y는 왼쪽, y1,y2는 오른쪽에 표시됨."
                            }
                        ]
                  };
				  
	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");

    return sFieldAttr;
}
/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : model contents (JSON format)
 * Description  : Function to generate a component source based on field information of the model entered by the user
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(){

	// Chart Attribute
	var oChartAttr = {};
	var oTitle = {};
	var oLegend = {};
	
	var sTitletext = this.oGenerationAttr.attributes.titletext;
	var sSubTitletext = this.oGenerationAttr.attributes.subtitletext;
	var sTitleAlign = this.oGenerationAttr.attributes.titlealign;
	var sLegendPosition = this.oGenerationAttr.attributes.legendposition;
	
	//모델 필드 갯수 가져오기
    var nFieldCount = this.oFieldArray.fieldcount;
	
	// 카테고리 필드 ID
	var sCategoryId;
	
	var arrField = new Array(); 
	var arrSeriesField = new Array();
	var arrSeriesFieldBar = new Array();				// [CombinationChart] bar인 series 임시 배열
	var arrSeriesFieldBarN = new Array();				// [CombinationChart] bar가 아닌 series 임시 배열
	var arrAxisY1Field = new Array();
	var arrAxisY2Field = new Array();

	var sDisplaytype, sValueaxes;
	
	//차트에서 사용할 모델 Field ID 리스트 만들기
    for(i=0;i<nFieldCount;i++)
    {
        oField = this.oFieldArray.fields[i];
		sDisplaytype = oField.displaytype;
		sValueaxes = oField.valueaxes;
		
		// this.oFieldArray Json Data로 Field Array() 셋팅
		arrField.push(oField.id);
		
		// displaytype에 따라 Array() 셋팅
		if (sDisplaytype == "category") {
			if (sCategoryId == undefined) {
				sCategoryId = oField.id;
			} else {
				this.lfn_Log("category가 여러개 설정되었습니다.","warn");
			}
			
		} else if (sDisplaytype == "series") {
			
			// [CombinationChart] seriesdisplay 값이 bar것과 아닌거 구분하여 추가
			if (oField.seriesdisplay == "bar") {
				arrSeriesFieldBar.push(oField);
			} else {
				arrSeriesFieldBarN.push(oField);
			}
			
			// valueaxes에 따라 Y축 Array() 셋팅
			if (sValueaxes == "y1") {
				arrAxisY1Field.push(oField);
			} else if (sValueaxes == "y2") {
				arrAxisY2Field.push(oField);
			}
		}
    }
	
	// [CombinationChart] bar형식을 arrSeriesField 앞쪽에 추가(∵ 중간에 시리즈가 추가되면 막대차트 사이에 공간이 생김.)
	arrSeriesField = arrSeriesFieldBar.concat(arrSeriesFieldBarN);
	
	// 차트 기본속성 셋팅
	oChartAttr = this.lfn_CloneObject(this.oBaseChartAttr);
	
	// 에니메이션 설정
	oChartAttr["enableanimation"] = this.oGenerationAttr.attributes.enableanimation;
	
	// 타이틀설정
	if (sTitletext != undefined || sSubTitletext != undefined) {
		oTitle = this.lfn_CloneObject(this.oBaseTitle);
		oTitle["text"] = sTitletext;
		oTitle["subtext"] = sSubTitletext;
		oTitle["align"] = sTitleAlign;
	}
				
	// 범례 설정
	if (sLegendPosition != "none")
	{
		oLegend = this.lfn_CloneObject(this.oBaseLegend);
		oLegend["align"] = sLegendPosition;
	}
	
	// 카테고리 설정
	if (sCategoryId == undefined) {
		this.lfn_Log("category가 설정되지 않았습니다.","warn");
	} else {
		oChartAttr["categorycolumn"] = "bind:" + sCategoryId;
	}
	
	//차트 컴포넌트 추가
	var oModel = this.oContents.View.Model;
    oModel[oModel.length] = {
            "fieldid" : arrField.join(","),
            "Components" :
            [
                {
                    "tag" : "BasicChart",
                    "attribute" : oChartAttr,
                    "BasicChart" :
                    [
                        {
                            "tag"	: "Contents",
							"value"	: {
								"title" 		: oTitle,
								"legend" 		: oLegend,
								"tooltip" 		: this.oBaseTooltip,
								"board" 		: this.oBaseBoard,
								"categoryaxis" 	: this.oBaseCategoryaxis,
								"valueaxes" 	: fn_GetValueAxes(arrAxisY1Field,arrAxisY2Field),
								"seriesset" 	: fn_GetSeries(arrSeriesField)
							}
                        }
                    ]
                }
            ]
        }

	//생성할 Model 정보 리턴
    return oModel;
};

// 데이터 축 설정
fn_GetValueAxes = function(arrAxisY1Field, arrAxisY2Field)
{
	var sAxisTitleText = this.lfn_IsNullEmpty(this.oGenerationAttr.attributes.valueaxistitletext);
	var arrAxisTitleText = sAxisTitleText.split(",");
	
	var arrValueAxes = new Array();
	var oValueAxes;
	
	var oField;
	
	// TODO : 축관련 설정이 들어가면 수정필요.
	
	// 기본y축 추가
	oValueAxes = {};
	oValueAxes = this.lfn_CloneObject(this.oBaseValueaxis);
	oValueAxes["id"] = "valueaxis" + "y";
	oValueAxes["titletext"] = this.lfn_Trim(arrAxisTitleText[0]);
	arrValueAxes.push(oValueAxes);
	
	// Y1추가
	if (arrAxisY1Field.length > 0) {
		oValueAxes = {};
		oValueAxes = this.lfn_CloneObject(this.oBaseValueaxis2);
		oValueAxes["id"] = "valueaxis" + "y1";
		oValueAxes["titletext"] = this.lfn_Trim(arrAxisTitleText[1]);
		
		arrValueAxes.push(oValueAxes);
	}
	
	// Y2추가
	if (arrAxisY2Field.length > 0) {
		oValueAxes = {};
		oValueAxes = this.lfn_CloneObject(this.oBaseValueaxis2);
		oValueAxes["id"] = "valueaxis" + "y2";
		oValueAxes["titletext"] = this.lfn_Trim(arrAxisTitleText[2]);
		
		arrValueAxes.push(oValueAxes);
	}

    return arrValueAxes;
}

// 시리즈 셋팅
fn_GetSeries = function(arrSeriesField)
{
	var sBarItemTextPosition = this.oGenerationAttr.attributes.baritemtextposition;
	var sLineAreaItemTextPosition = this.oGenerationAttr.attributes.lineareaitemtextposition;
	
	var arrSeries = new Array();
	var oSeries;
	
	var oField;
	
	var sSeriesDisplay;
	var sLineType;
	var sItemTextPositionNm = "";
	var sItemTextPosition;
	
	var nCount = arrSeriesField.length;

	// arrSeriesField 갯수 기준으로 series 태그 생성
	for(var i=0;i<nCount;i++)
	{
		oSeries = {};
		
		oField = arrSeriesField[i];
		
		sSeriesDisplay = oField.seriesdisplay;
		
		// 시리즈 유형에 따라 값 처리
		if (sSeriesDisplay == "line") {									// seriesdisplay = "line"
			oSeries = this.lfn_CloneObject(this.oBaseSeriesLine);
			
			// 선유형설정
			sLineType = oField.linetype;
			
			// 데이터 출력설정
			sItemTextPositionNm = "lineitemtextposition";
			sItemTextPosition 	= sLineAreaItemTextPosition;
			
		} else if (sSeriesDisplay == "linepoint") {						// seriesdisplay = "linepoint"
			oSeries = this.lfn_CloneObject(this.oBaseSeriesLine);
			
			// 라인에 점을 표시할지 여부
			oSeries["pointvisible"] = true;
			
			// 선유형설정
			sLineType = oField.linetype;
			
			// 데이터 출력설정
			sItemTextPositionNm = "pointitemtextposition";
			sItemTextPosition 	= sLineAreaItemTextPosition;
			
		} else if (sSeriesDisplay == "area") {								// AreaChart
			oSeries = this.lfn_CloneObject(this.oBaseSeriesArea);
			
			// 선유형설정
			sLineType = oField.linetype;
			
			// 데이터 출력설정
			sItemTextPositionNm = "lineitemtextposition";
			sItemTextPosition 	= sLineAreaItemTextPosition;
			
		} else {															// BarChart
			oSeries = this.lfn_CloneObject(this.oBaseSeriesBar);
			
			// 선유형설정
			sLineType = "";
			
			// 데이터 출력설정
			sItemTextPositionNm = "baritemtextposition";
			sItemTextPosition 	= sBarItemTextPosition;
		}
		
		oSeries["id"] = this.lfn_GetCompId("series" + " " + oField.id);
		oSeries["titletext"] = oField.label;
		oSeries["valuecolumn"] = "bind:" + oField.id;
		
		// 선유형설정
		if (this.lfn_IsNotNull(sLineType)) {
			oSeries["linetype"] = sLineType;
		}
		
		// [CombinationChart] 시리즈 색상처리
		oSeries["barfillstyle"]			= this.lfn_GetChartColor(i);
		oSeries["linestyle"]			= this.SERIES_LINE_STYLE + " " + this.lfn_GetChartColor(i);
		oSeries["lineareafillstyle"]	= this.lfn_GetChartColor(i);
		oSeries["pointfillstyle"]		= this.lfn_GetChartColor(i);
		
		// 데이터 출력설정
		if (sItemTextPosition == "none") {
			oSeries["itemtextvisible"] = false;
		} else {
			oSeries["itemtextvisible"] = true;
			oSeries[sItemTextPositionNm] = sItemTextPosition;
		}
		
		// Y축설정
		if (oField.valueaxes == "y1") {
			oSeries["valueaxis"] = "valueaxisy1";
		} else if (oField.valueaxes == "y2") {
			oSeries["valueaxis"] = "valueaxisy2";
		}
		
		arrSeries.push(oSeries);
	}
	
    return arrSeries;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function(){

    var oInitValue = [];
    /*
    oInitValue =
    [
        {
            "tag" : "initValue",
            "initValue" :
            [
                {
                    "tag" : "Button",
                    "attribute" :
                    {
                        "id" : "btnSearch", "text" : "Search11"
                    }
                }
            ]
        }
    ];
    */
    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function(){

	//오브젝트 정보 초기화
    var oObjects = [];

	//오브젝트 정보 설정
    oObjects =
    [
        {
            "tag": "Dataset",
            "attribute": { "id": "viewdataset" },
            "Dataset": [
                {
                    "tag": "ColumnInfo",
                    "attribute": {},
					//데이터셋 컬럼정보 설정함수 호출
                    "ColumnInfo": fn_GetDsColumns()
                },
                {
                    "tag": "Rows",
                    "attribute": {},
					//데이터셋 로우정보 설정함수 호출
                    "Rows": fn_GetDsRows()
                }
            ]
        }
    ];

    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function(){

	//스크립트 정보 초기화
    var oScript = {};

	//스크립트 정보 리턴
    return oScript;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsColumns
 * Parameter    :
 *                - this.oFieldArray : model field data
 * Return       : dataset column(s) data
 * Description  : Function to generate <Column> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsColumns = function(){
    var i;
    var oColumns = [];

    var oField;
    var sFieldId;
    var sDataType;
    var sDataSize;

    //모델 Field 개수 가져오기
    var nCount = this.oFieldArray.fieldcount;

    //모델 Field 개수 만큼 컬럼 정보 만들기
    for(i=0;i<nCount;i++)
    {
        oField = this.oFieldArray.fields[i];

        sFieldId = oField.id;
        sDataType = oField.datatype;
        sDataSize = oField.datasize;

        oColumns[i] =
        {
            "tag": "Column",
            "attribute":
            {
                "id": sFieldId, "type": sDataType, "size": sDataSize
            }
        };
    }

    //컬럼 정보 리턴
    return oColumns;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsRows
 * Parameter    :
 *                - this.oFieldArray : model field data
 * Return       : dataset row(s) data
 * Description  : Function to generate <Row> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsRows = function(){
    var i;
    var oRows = [];
    var oRow = [];

    var oField;
    var sFieldId;

    //로우 개수
    var nRowCnt = 1;

    //컬럼 개수
    var nColCnt = this.oFieldArray.fieldcount;

    for(i=0;i<nRowCnt;i++)
    {
        oRow = [];

        //Row정보 Rows에 추가
        oRows[i] = {"tag": "Row",    "attribute": {},"Row": oRow};
    }

    //Rows 정보 리턴
    return oRows;
}]]></Script>
</ViewTemplateInfo>
